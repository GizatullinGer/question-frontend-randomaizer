import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Цепочка вызовов функций (Chaining) - это прием программирования, который
				позволяет вызывать несколько методов или функций одного объекта (или
				результатов других функций) последовательно в одном выражении, используя
				точку (.) для вызова каждого последующего метода.
			</p>
			<p>
				Этот подход делает код более читаемым и позволяет сократить количество
				временных переменных, сохраняющих промежуточные результаты, так как
				каждый метод возвращает объект или значение, которое можно использовать
				для вызова следующего метода.
			</p>
			<p>Пример цепочки вызовов функций:</p>
			<Examples>
				const obj = &#123;
				<br />
				&emsp;&emsp;value: 0,
				<br />
				&emsp;&emsp;increment() &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;this.value++;
				<br />
				&emsp;&emsp;&emsp;&emsp;return this; // возвращает текущий объект для
				поддержки цепочки вызовов
				<br />
				&emsp;&emsp;&#125;,
				<br />
				&emsp;&emsp;add(num) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;this.value += num;
				<br />
				&emsp;&emsp;&emsp;&emsp;return this; // возвращает текущий объект для
				поддержки цепочки вызовов
				<br />
				&emsp;&emsp;&#125;,
				<br />
				&emsp;&emsp;getValue() &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;return this.value;
				<br />
				&emsp;&emsp;&#125;
				<br />
				&#125;;
				<br />
				<br />
				const result = obj.increment().add(5).getValue();
				<br />
				console.log(result); // Output: 6
			</Examples>
			<p>
				Здесь методы <b>increment()</b> и <b>add()</b> возвращают <b>this</b>{' '}
				(текущий объект), что позволяет вызывать методы последовательно. Таким
				образом, вы можете последовательно вызывать методы на одном и том же
				объекте без необходимости сохранения промежуточных результатов в
				отдельных переменных.
			</p>
			<p>
				Для того чтобы реализовать цепочку вызовов функций, методы объекта (или
				функции) должны возвращать ссылку на объект (или значение), на котором
				они были вызваны, чтобы можно было продолжить вызов следующего метода.
				Это обычно достигается с помощью <b>return this;</b>, где <b>this</b>{' '}
				ссылается на текущий объект (или контекст).
			</p>
		</div>
	)
}

export default Question
