import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				`<b>null</b>` и `<b>undefined</b>` - это два разных значения в
				JavaScript, которые обозначают отсутствие значения, но у них есть
				некоторые различия:
			</p>
			<ol>
				<li>
					<b>undefined:</b>
					<ul>
						<li>
							<b>`undefined ` </b> означает, что переменная была объявлена, но
							ей не было присвоено никакого значения. То есть, если переменная
							существует, но для нее не задано конкретное значение, то она будет
							иметь значение <b>`undefined `</b>.
						</li>
						<li>
							<b>`undefined ` </b> также может быть возвращено в результате
							доступа к свойствам объекта или элементам массива, которые не
							существуют.
						</li>
						<li>
							При попытке доступа к несуществующей переменной или свойству
							объекта, значение будет <b>`undefined `</b>.
						</li>
						<li>
							Пример: <b>`let x; console.log(x); // undefined`</b>
						</li>
					</ul>
				</li>
				<li>
					<b>null:</b>
					<ul>
						<li>
							<b>`null ` </b> используется, когда значение явно отсутствует. Это
							может быть присвоено переменной, чтобы явно указать, что она не
							содержит никакого значения.
						</li>
						<li>
							Это также может быть результатом явного присвоения переменной
							значения <b>`null`</b>.
						</li>
						<li>
							В отличие от <b>`undefined `</b>, <b>`null`</b> это явное
							значение, которое вы можете присвоить переменной.
						</li>
						<li>
							Пример: <b>`let y = null; console.log(y); // null`</b>
						</li>
					</ul>
				</li>
			</ol>
			<p>
				В контексте условных проверок, <b>`null`</b> и <b>`undefined `</b>
				считаются "ложными" (falsy) значениями, что означает, что они
				рассматриваются как <b>`false`</b> в условиях. Однако, при строгом
				сравнении (например, ===), <b>`null`</b> и <b>`undefined `</b> не
				считаются одинаковыми.
			</p>
		</div>
	)
}

export default Question
