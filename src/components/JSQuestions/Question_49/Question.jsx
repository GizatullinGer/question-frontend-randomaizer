import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Иммутабельность в программировании означает, что объект или структура
				данных не может быть изменен после создания. В контексте JavaScript
				использование иммутабельных структур данных имеет свои плюсы и минусы.
			</p>
			<p>
				<b>Плюсы иммутабельности:</b>
			</p>
			<p>
				<ol>
					<li>
						<b>Безопасность кода: </b>Иммутабельность делает код более
						предсказуемым, так как избегаются неожиданные изменения значений.
					</li>
					<li>
						<b>Параллелизм и многопоточность: </b>Иммутабельные структуры данных
						легче использовать в параллельных и многопоточных средах, так как
						они не подвержены гонкам данных.
					</li>
					<li>
						<b>Легче отслеживать изменения: </b>Поскольку объекты не изменяются
						после создания, проще отслеживать, где и какие изменения происходят.
					</li>
					<li>
						<b>Чистые функции и предсказуемость: </b>Использование
						иммутабельности способствует созданию чистых функций (функций без
						побочных эффектов), что улучшает предсказуемость и тестирование
						кода.
					</li>
				</ol>
			</p>
			<p>
				<b>Минусы иммутабельности:</b>
			</p>
			<p>
				<ol>
					<li>
						<b>Издержки памяти: </b>При изменении иммутабельных структур данных
						создаются новые экземпляры объектов, что может привести к
						избыточному использованию памяти.
					</li>
					<li>
						<b>Производительность: </b>Некоторые операции с иммутабельными
						структурами данных могут быть менее эффективными по времени
						выполнения, особенно при работе с большими объемами данных из-за
						создания новых объектов вместо изменения существующих.
					</li>
				</ol>
			</p>
			<p>
				<b>Как достичь иммутабельности в JavaScript:</b>
			</p>
			<p>
				<ol>
					<li>
						<b>Использование неизменяемых типов данных: </b>Некоторые встроенные
						типы данных JavaScript, такие как строки <b>(String)</b> и числа{' '}
						<b>(Number)</b>, являются неизменяемыми.
					</li>
					<li>
						<b>Использование методов для создания измененных копий: </b>
						Например, методы массивов <b>concat()</b>, <b>slice()</b> или
						оператор расширения <b>...</b> для создания новых массивов вместо
						изменения существующих.
					</li>
					<li>
						<b>Использование библиотек для работы с неизменяемыми данными: </b>
						Библиотеки, такие как Immutable.js, immer.js и другие, предоставляют
						инструменты для работы с неизменяемыми структурами данных в
						JavaScript, облегчая создание и обновление таких данных.
					</li>
				</ol>
			</p>
			<p>
				При использовании иммутабельности важно оценить баланс между
				безопасностью кода, предсказуемостью и производительностью, чтобы
				выбрать подходящий уровень изменчивости данных для конкретного проекта
				или задачи.
			</p>
		</div>
	)
}

export default Question
