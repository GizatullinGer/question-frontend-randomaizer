import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Оба метода <b>Object.freeze()</b> и <b>Object.seal()</b> используются
				для ограничения изменений в объектах в JavaScript, но имеют некоторые
				различия в своем поведении.
			</p>
			<p>
				<ol>
					<li>
						<b>Object.freeze():</b>
						<ul>
							<li>
								<b>Object.freeze()</b> предотвращает изменение существующих
								свойств объекта, а также добавление новых свойств или удаление
								существующих свойств.
							</li>
							<li>
								Замороженный объект не может быть изменен. Попытки изменить его
								свойства или структуру будут проигнорированы и вызовут ошибку в
								строгом режиме <b>(use strict)</b>, но в нестрогом режиме это не
								вызовет ошибку, а просто не выполнит изменения.
							</li>
							<li>
								Применение <b>Object.freeze()</b> затрагивает все вложенные
								объекты, делая их также неизменяемыми (если они не были
								заморожены ранее).
							</li>
						</ul>
						<p>
							Пример <b>Object.freeze()</b>:
						</p>
						<Examples>
							const obj = &#123;
							<br />
							&emsp;&emsp;prop1: 'value1',
							<br />
							&emsp;&emsp;prop2: 'value2'
							<br />
							&#125;;
							<br />
							<br />
							Object.freeze(obj);
							<br />
							obj.prop1 = 'new value'; // Изменения не применятся
							<br />
							delete obj.prop2; // Удаление не выполнится
						</Examples>
					</li>
					<li>
						<b>Object.seal():</b>
						<ul>
							<li>
								<b>Object.seal()</b> запрещает добавление или удаление свойств
								из объекта, но позволяет изменять значения существующих свойств.
							</li>
							<li>
								Подобно <b>Object.freeze()</b>, попытки добавить или удалить
								свойства будут проигнорированы в строгом режиме и вызовут ошибку
								в нестрогом режиме. Однако, значения существующих свойств могут
								быть изменены.
							</li>
							<li>
								<b>Object.seal()</b> не затрагивает вложенные объекты; изменения
								могут быть выполнены во вложенных объектах.
							</li>
						</ul>
						<p>
							Пример <b>Object.seal()</b>:
						</p>
						<Examples>
							const obj = &#123;
							<br />
							&emsp;&emsp;prop1: 'value1',
							<br />
							&emsp;&emsp;prop2: 'value2'
							<br />
							&#125;;
							<br />
							<br />
							Object.seal(obj);
							<br />
							obj.prop1 = 'new value'; // Изменение выполнится
							<br />
							delete obj.prop2; // Удаление не выполнится
						</Examples>
					</li>
				</ol>
			</p>
			<p>
				Итак, основное различие между <b>Object.freeze()</b> и
				<b>Object.seal()</b> заключается в том, что <b>Object.freeze()</b>
				делает объект полностью неизменяемым (замораживает значения свойств), в
				то время как <b>Object.seal()</b> позволяет изменять значения
				существующих свойств, но не позволяет добавлять или удалять свойства.
			</p>
		</div>
	)
}

export default Question
