import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Оператор <b>in</b> и метод <b>hasOwnProperty()</b> используются для
				проверки наличия свойств в объекте, однако они имеют некоторые различия
				в своем поведении:
			</p>
			<p>
				<ol>
					<li>
						<b>Оператор in:</b>
						<ul>
							<li>
								<b>in</b> - это оператор JavaScript, который проверяет наличие
								указанного свойства в объекте, включая свойства из цепочки
								прототипов.
							</li>
							<li>
								Он возвращает <b>true</b>, если свойство находится в объекте или
								его цепочке прототипов, иначе возвращает <b>false</b>.
							</li>
						</ul>
						Пример:
						<Examples>
							const obj = &#123; a: 1, b: 2 &#125;;
							<br />
							<br />
							console.log('a' in obj); // Output: true
							<br />
							console.log('c' in obj); // Output: false
						</Examples>
					</li>
					<li>
						<b>Метод hasOwnProperty():</b>
						<ul>
							<li>
								<b>hasOwnProperty()</b> - это метод объекта в JavaScript,
								который проверяет, содержит ли объект указанное свойство
								исключительно в своем собственном списке свойств (не в цепочке
								прототипов).
							</li>
							<li>
								Он возвращает <b>true</b>, если свойство находится
								непосредственно в объекте (а не унаследовано через прототип),
								иначе возвращает <b>false</b>.
							</li>
						</ul>
						Пример:
						<Examples>
							const obj = &#123; a: 1, b: 2 &#125;;
							<br />
							<br />
							console.log(obj.hasOwnProperty('a')); // Output: true
							<br />
							console.log(obj.hasOwnProperty('toString')); // Output: false,
							метод toString унаследован из прототипа Object
						</Examples>
					</li>
				</ol>
			</p>
			<p>
				Различие между ними заключается в том, что <b>in</b> проверяет наличие
				свойства как в самом объекте, так и в его цепочке прототипов, тогда как
				<b>hasOwnProperty()</b> проверяет только наличие свойства
				непосредственно в объекте, исключая прототипные свойства.
			</p>
			<p>
				Иногда важно понимать это различие, особенно при проверке свойств
				объектов, когда необходимо учитывать, откуда наследуются свойства, или
				если требуется только проверить наличие свойств, определенных в самом
				объекте, без учета прототипов.
			</p>
		</div>
	)
}

export default Question
