/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Прототип (Prototype) объекта - это механизм, используемый в JavaScript
				для наследования свойств и методов между объектами. Каждый объект в
				JavaScript имеет ссылку на другой объект, называемый его прототипом.
				Прототип является скрытым свойством объекта и используется при доступе к
				свойствам или методам, которые отсутствуют в самом объекте.
			</p>
			<p>Основные концепции, связанные с прототипами в JavaScript:</p>
			<p>
				<ol>
					<li>
						<b>Прототипное наследование (Prototype Chain): </b>Если свойство или
						метод не найдены непосредственно в объекте, JavaScript ищет их в его
						прототипе. Если они не найдены в прототипе, поиск продолжается по
						цепочке прототипов до тех пор, пока свойство не будет найдено или не
						достигнут конечный прототип <b>Object.prototype</b>.
					</li>
					<li>
						<b>Свойство prototype функций конструкторов:</b>Функции
						конструкторы, используемые для создания объектов через оператор{' '}
						<b>new</b>, имеют свойство <b>prototype</b>, которое становится
						прототипом для всех экземпляров, созданных с помощью этой функции
						конструктора.
					</li>
					<li>
						<b>Свойство __proto__: </b>Это скрытое свойство каждого объекта,
						которое ссылается на его прототип. Однако, для доступа и установки
						прототипа объекта лучше использовать методы{' '}
						<b>Object.getPrototypeOf()</b> и <b>Object.setPrototypeOf()</b>{' '}
						соответственно, так как использование <b>__proto__</b> является
						устаревшим и не рекомендуется для использования в продакшен-коде.
					</li>
				</ol>
			</p>
			<p>Пример:</p>
			<Examples>
				// Создание объекта person
				<br />
				let person = &#123;
				<br />
				&emsp;&emsp;name: 'John',
				<br />
				&emsp;&emsp;age: 30
				<br />
				&#125;;
				<br />
				<br />
				// Добавление прототипа для объекта person
				<br />
				let personPrototype = &#123;
				<br />
				&emsp;&emsp;greet: function() &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;return `Привет, меня зовут
				$&#123;this.name&#125;!`;
				<br />
				&emsp;&emsp;&#125;
				<br />
				&#125;;
				<br />
				<br />
				// Установка прототипа для объекта person
				<br />
				Object.setPrototypeOf(person, personPrototype);
				<br />
				<br />
				// Доступ к методу greet через прототип объекта
				<br />
				console.log(person.greet()); // Выведет: Привет, меня зовут John!
			</Examples>
			<p>
				Прототипы позволяют эффективно использовать наследование в JavaScript и
				повторно использовать код через распределение свойств и методов между
				объектами. Они являются основой для объектно-ориентированного
				программирования в JavaScript.
			</p>
		</div>
	)
}

export default Question
