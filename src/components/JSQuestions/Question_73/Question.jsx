/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Каррирование (currying) - это техника функционального программирования,
				которая заключается в преобразовании функции с множеством аргументов в
				последовательность функций с одним аргументом. При этом каждая функция
				принимает один аргумент и возвращает новую функцию, которая ожидает
				следующий аргумент и так далее, пока не будет получено достаточно
				аргументов для вызова исходной функции.
			</p>
			<p>
				Простым языком, каррирование позволяет разбить функцию с несколькими
				аргументами на последовательность функций с одним аргументом.
			</p>
			<p>Пример функции без каррирования:</p>
			<Examples>
				function add(a, b) &#123;
				<br />
				&emsp;&emsp;return a + b;
				<br />
				&#125;
				<br />
				<br />
				// Вызов функции сразу с двумя аргументами
				<br />
				console.log(add(2, 3)); // Выведет: 5
			</Examples>
			<p>Пример функции с каррированием:</p>
			<Examples>
				function add(a) &#123;
				<br />
				&emsp;&emsp;return function(b) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;return a + b;
				<br />
				&emsp;&emsp;&#125;;
				<br />
				&#125;
				<br />
				<br />
				// Вызов функции с одним аргументом
				<br />
				const addTwo = add(2);
				<br />
				<br />
				// Вызов возвращенной функции с другим аргументом
				<br />
				console.log(addTwo(3)); // Выведет: 5
			</Examples>
			<p>
				Функция <b>add</b> превращается в функцию с одним аргументом <b>(a)</b>,
				которая возвращает другую функцию, ожидающую следующий аргумент{' '}
				<b>(b)</b>. Таким образом, <b>add(2)</b> возвращает новую функцию,
				которая добавит <b>2</b> к своему аргументу.
			</p>
			<p>
				Преимущества каррирования включают возможность создания более гибких и
				переиспользуемых функций, а также упрощение работы с частичными данными
				в функциональном программировании.
			</p>
		</div>
	)
}

export default Question
