import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Использование <b>"use strict"</b>; в JavaScript включает строгий режим,
				который изменяет семантику кода, предотвращает определенные ошибки и
				улучшает безопасность кода. Вот несколько плюсов и минусов использования
				строгого режима:
			</p>
			<p>
				<b>Плюсы использования "use strict";:</b>
			</p>
			<p>
				<ol>
					<li>
						<b>Более строгая проверка ошибок: </b> Строгий режим делает код
						более строгим и предотвращает некоторые типичные ошибки
						программирования. Он выдаст ошибки при использовании неправильного
						использования this, некоторых недопустимых операций и других
						ситуаций, которые могут привести к непредсказуемому поведению.
					</li>
					<li>
						<b>Исключение некоторых небезопасных действий: </b>Строгий режим
						запрещает использование некоторых потенциально опасных возможностей
						JavaScript, таких как использование необъявленных переменных (var a
						= 123; vs a = 123;), что помогает предотвратить ошибки и
						нежелательные эффекты.
					</li>
					<li>
						<b>Повышение производительности: </b>Некоторые оптимизации в
						JavaScript-движках могут быть применены только в строгом режиме, что
						может улучшить производительность кода.
					</li>
				</ol>
			</p>
			<p>Минусы использования "use strict";:</p>
			<p>
				<ol>
					<li>
						<b>Совместимость со старыми браузерами: </b>Некоторые старые версии
						браузеров или устаревшие среды выполнения JavaScript не поддерживают
						строгий режим. Это означает, что код, содержащий "use strict";,
						может вызывать ошибки или работать некорректно в старых браузерах.
					</li>
					<li>
						<b>Необходимость внесения изменений в существующий код: </b>Если в
						существующем проекте используется строгий режим, это может
						потребовать изменения кода, так как строгий режим запрещает
						некоторые конструкции, которые ранее были допустимы.
					</li>
					<li>
						<b>Не устраняет все проблемы: </b>Хотя строгий режим помогает
						предотвратить многие типичные ошибки, он не устраняет все возможные
						проблемы с кодом.
					</li>
				</ol>
			</p>
			<p>
				В целом, использование строгого режима обычно рекомендуется, поскольку
				он помогает предотвращать ошибки, улучшает безопасность и читаемость
				кода. Однако необходимо учитывать возможные проблемы совместимости и
				потребность в модификации существующего кода при включении строгого
				режима.
			</p>
		</div>
	)
}

export default Question
