import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				<b>Proxy</b> - это мощный инструмент в JavaScript, который позволяет
				создавать специальные объекты (прокси) для перехвата и определения
				различных операций на других объектах (целевых объектах). Он
				предоставляет возможность создавать объекты-обертки над другими
				объектами и определять пользовательскую логику для различных операций,
				таких как чтение, запись, удаление свойств и других.
			</p>
			<p>
				Вот несколько случаев, когда <b>Proxy</b> может быть полезен:
			</p>
			<p>
				<ol>
					<li>
						<b>Интерцепция операций над объектом:</b> <br />
						<b>Proxy</b> позволяет перехватывать различные операции (например,
						чтение, запись, удаление свойств) над целевым объектом и выполнять
						пользовательские действия перед выполнением этих операций или после
						них.
					</li>
					<li>
						<b>Валидация данных:</b> <br />
						Прокси может использоваться для проверки данных перед их установкой
						в целевой объект. Это позволяет контролировать корректность данных и
						отклонять некорректные значения.
					</li>
					<li>
						<b>Логирование и отладка:</b> <br />
						<b>Proxy</b> может записывать логи или производить отладочные
						действия при доступе к свойствам объекта, что может быть полезным
						для отслеживания работы программы.
					</li>
					<li>
						<b>Создание виртуальных свойств и объектов:</b> <br />
						Можно использовать <b>Proxy</b> для создания виртуальных свойств,
						которые не хранятся физически в объекте, а вычисляются динамически
						при обращении к ним.
					</li>
				</ol>
			</p>
			<p>
				Пример использования <b>Proxy</b> для перехвата чтения и записи свойств
				объекта:
			</p>
			<Examples>
				let target = &#123;
				<br />
				&emsp;&emsp;name: 'Alice',
				<br />
				&emsp;&emsp;age: 30
				<br />
				&#125;;
				<br />
				<br />
				let handler = &#123;
				<br />
				&emsp;&emsp;get: function(target, prop) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;console.log(`Чтение свойства
				'$&#123;prop&#125;'`);
				<br />
				&emsp;&emsp;&emsp;&emsp;return target[prop];
				<br />
				&emsp;&emsp;&#125;,
				<br />
				&emsp;&emsp;set: function(target, prop, value) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;console.log(`Установка свойства
				'$&#123;prop&#125;' на значение '$&#123;value&#125;'`);
				<br />
				&emsp;&emsp;&emsp;&emsp;target[prop] = value;
				<br />
				&emsp;&emsp;&#125;
				<br />
				&#125;;
				<br />
				<br />
				let proxy = new Proxy(target, handler);
				<br />
				<br />
				proxy.name; // Чтение свойства 'name' -{'>'} Вернет: 'Alice'
				<br />
				proxy.age = 35; // Установка свойства 'age' на значение '35'
			</Examples>
			<p>
				<b>Proxy</b> позволяет создавать гибкие объекты-обертки и управлять их
				поведением, что делает его полезным инструментом для реализации
				различных паттернов программирования и контроля за поведением объектов в
				JavaScript.
			</p>
		</div>
	)
}

export default Question
