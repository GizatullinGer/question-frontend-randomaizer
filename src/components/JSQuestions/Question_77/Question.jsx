import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				"Сборщик мусора" (Garbage Collector) в JavaScript отвечает за
				автоматическое управление памятью, освобождая память, занятую объектами,
				которые больше не используются или на которые нет ссылок из кода. Это
				помогает избежать утечек памяти и улучшает производительность программы.
			</p>
			<p>Основные принципы работы сборщика мусора в JavaScript:</p>
			<h3>1. Слежение за ссылками (Reference Tracking):</h3>
			<p>
				<ul>
					<li>
						Сборщик мусора отслеживает все объекты, которые были созданы в
						программе, и следит за ссылками на эти объекты.
					</li>
					<li>
						Если на объект больше нет ссылок (то есть нет пути от корневых
						объектов, например, глобального объекта <b>window</b> или
						переменных), он считается недостижимым и подлежит удалению.
					</li>
				</ul>
			</p>
			<h3>2. Алгоритмы сборки мусора:</h3>
			<p>
				<ul>
					<li>
						<b>Mark-and-Sweep (Маркировка и утилизация):</b>
						<ul>
							<li>
								Это один из наиболее распространенных алгоритмов сборки мусора.
							</li>
							<li>Процесс состоит из двух этапов: маркировка и утилизация.</li>
							<li>
								На этапе маркировки сборщик мусора помечает все объекты,
								доступные из корневых объектов.
							</li>
							<li>
								На этапе утилизации он удаляет все объекты, которые не были
								помечены (то есть не достижимы).
							</li>
						</ul>
					</li>
					<li>
						<b>
							Generational Garbage Collection (Поколенческая сборка мусора):
						</b>
						<ul>
							<li>
								Этот метод основан на наблюдении, что большинство объектов живет
								короткое время.
							</li>
							<li>
								Объекты делятся на несколько поколений, и сборка мусора
								сосредоточена на различных поколениях.
							</li>
							<li>
								Объекты вновь созданные (недавно выделенные) помещаются в
								младшее поколение. Если объект переживает несколько сборок
								мусора, он перемещается в старшее поколение.
							</li>
						</ul>
					</li>
				</ul>
			</p>
			<h3>3. Моменты запуска сборщика мусора:</h3>
			<ul>
				<li>
					Сборка мусора в JavaScript происходит автоматически и не является
					предсказуемой.
				</li>
				<li>
					Сборщик мусора запускается в том случае, если имеется нехватка памяти
					или система определяет, что это необходимо для оптимизации.
				</li>
			</ul>
			<h3>4. Оптимизация производительности:</h3>
			<ul>
				<li>
					Современные браузеры и движки JavaScript постоянно улучшают алгоритмы
					сборки мусора, чтобы минимизировать воздействие на производительность
					приложения.
				</li>
			</ul>
			<p>
				Эффективное использование сборщика мусора важно для управления памятью в
				JavaScript. Правильное управление жизненным циклом объектов помогает
				избегать утечек памяти и обеспечивает более эффективное использование
				ресурсов.
			</p>
		</div>
	)
}

export default Question
