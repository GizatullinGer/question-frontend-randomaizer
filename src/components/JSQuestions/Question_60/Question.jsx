import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Замыкание (Closure) - это важное понятие в JavaScript, которое
				возникает, когда функция имеет доступ к переменным из области видимости,
				в которой она была определена, даже после завершения выполнения этой
				области видимости. В других словах, замыкание позволяет функции
				"запоминать" переменные и параметры из своей родительской области
				видимости, даже после того, как родительская область видимости уже
				завершила свою работу.
			</p>
			<p>
				Замыкания могут быть мощным инструментом для создания гибких и
				эффективных паттернов программирования. Они часто используются для
				сохранения приватных данных и создания функций-фабрик.
			</p>
			<p>Пример использования замыкания:</p>
			<Examples>
				function createCounter() &#123;
				<br />
				&emsp;&emsp;let count = 0; // Эта переменная принадлежит замыканию
				<br />
				<br />
				&emsp;&emsp;return function() &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;return ++count;
				<br />
				&emsp;&emsp;&#125;;
				<br />
				&#125;
				<br />
				<br />
				const counter = createCounter();
				<br />
				<br />
				console.log(counter()); // 1<br />
				console.log(counter()); // 2
			</Examples>
			<p>
				В этом примере <b>`createCounter`</b> - это функция, которая создает и
				возвращает другую функцию. Эта внутренняя функция имеет доступ к
				переменной <b>`count`</b>, объявленной в родительской функции{' '}
				<b>`createCounter`</b>, и поэтому она может изменять и возвращать
				актуальное значение <b>`count`</b> при каждом вызове.
			</p>
			<p>
				Замыкания можно использовать для создания функций с сохранением
				состояния, асинхронных операций, обработчиков событий и других
				сценариев, когда необходимо сохранить доступ к данным и переменным,
				которые не должны быть доступны вне определенной функции.
			</p>
		</div>
	)
}

export default Question
