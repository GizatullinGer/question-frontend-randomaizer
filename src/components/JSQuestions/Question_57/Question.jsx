/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Рекурсия - это концепция в программировании, когда функция вызывает саму
				себя непосредственно или через цепочку других функций. Это позволяет
				решать задачи, разбивая их на более простые подзадачи того же типа.
				Рекурсия является одним из ключевых инструментов в функциональном
				программировании и решении некоторых математических задач.
			</p>
			<p>Основные характеристики рекурсии:</p>
			<p>
				<ol>
					<li>
						<b>Базовый случай (Base Case): </b>Это условие, при котором
						рекурсивные вызовы прекращаются. Без базового случая рекурсивная
						функция может вызывать саму себя бесконечно.
					</li>
					<li>
						<b>Шаг рекурсии (Recursive Step): </b>Это шаг или действие, которое
						рекурсивная функция выполняет перед тем, как снова вызвать саму
						себя. Это шаг по приближению к базовому случаю.
					</li>
				</ol>
			</p>
			<p>
				Пример рекурсивной функции на JavaScript для вычисления факториала
				числа:
			</p>
			<Examples>
				function factorial(n) &#123;
				<br />
				&emsp;&emsp;// Базовый случай: если n равно 0, возвращаем 1 (факториал 0
				равен 1)
				<br />
				&emsp;&emsp;if (n === 0) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;return 1;
				<br />
				&emsp;&emsp;&#125; else &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;// Шаг рекурсии: вызываем функцию factorial с
				аргументом на 1 меньше
				<br />
				&emsp;&emsp;&emsp;&emsp;return n * factorial(n - 1);
				<br />
				&emsp;&emsp;&#125;
				<br />
				&#125;
				<br />
				<br />
				// Вычисление факториала числа 5<br />
				console.log(factorial(5)); // Выведет: 120 (5! = 5 * 4 * 3 * 2 * 1 =
				120)
			</Examples>
			<p>
				Важно использовать базовый случай, чтобы гарантировать, что рекурсивные
				вызовы завершатся. Если базовый случай не достигнут или условие
				прекращения рекурсии не учтено, это может привести к бесконечному циклу
				(бесконечной рекурсии) и переполнению стека вызовов, что вызовет ошибку
				выполнения программы.
			</p>
			<p>
				Рекурсия применяется в алгоритмах обхода деревьев, поиске и сортировке
				данных, а также во многих других задачах, где применимо разделение
				задачи на более мелкие подзадачи того же типа.
			</p>
		</div>
	)
}

export default Question
