import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				JavaScript является динамически типизированным языком программирования.
				Это означает, что типы данных определяются автоматически в процессе
				выполнения программы, а не во время компиляции или объявления
				переменной.
			</p>
			<p>Основные характеристики динамической типизации в JavaScript:</p>
			<p>
				<ol>
					<li>
						<b>Неявное приведение типов:</b>
						JavaScript позволяет выполнить операции с переменными различных
						типов без явного преобразования. Например, когда происходит операция
						сложения, JavaScript попытается преобразовать значения к общему типу
						для выполнения операции.
					</li>
					<li>
						<b>Изменяемость типов: </b>Тип данных переменной может изменяться в
						процессе выполнения программы. Например, переменная, содержащая
						число, может затем хранить строку, объект или другой тип данных.
					</li>
					<li>
						<b>Динамическое определение типов: </b>В JavaScript тип переменной
						определяется в момент присваивания значения, а не при объявлении
						переменной. Это позволяет создавать переменные, не указывая их тип
						явно.
					</li>
				</ol>
			</p>
			<p>Примеры динамической типизации в JavaScript:</p>
			<Examples>
				let x = 10; // x - число (number)
				<br />
				x = 'Hello'; // теперь x - строка (string)
				<br />
				<br />
				let y = 20;
				<br />
				let z = x + y; // JavaScript автоматически преобразует x в строку и
				выполнит конкатенацию
				<br />
				<br />
				console.log(z); // Результат: "Hello20"
			</Examples>
			<p>
				Эти особенности делают JavaScript гибким и удобным языком для работы,
				однако требуют внимательного контроля типов данных в процессе разработки
				для избежания нежелательных ошибок и неожиданного поведения программы.
			</p>
		</div>
	)
}

export default Question
