/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Прототипное наследование - это механизм наследования в JavaScript,
				основанный на использовании прототипов объектов. Каждый объект в
				JavaScript имеет ссылку на другой объект, называемый его прототипом. При
				обращении к свойству объекта, которое отсутствует в самом объекте,
				JavaScript автоматически ищет это свойство в его прототипе, и так далее,
				вверх по цепочке прототипов, пока свойство не будет найдено или пока не
				достигнется конец цепочки прототипов (обычно null).
			</p>
			<p>
				Создание объекта без прототипа возможно с помощью метода
				Object.create(null). Это создает объект с пустым прототипом (null),
				который не наследует свойства или методы от стандартных прототипов
				JavaScript. Такой объект называется "прототипом-null".
			</p>
			<p>Пример создания объекта без прототипа:</p>
			<Examples>
				const objWithoutPrototype = Object.create(null);
				<br />
				<br />
				// Проверим, что у объекта нет прототипа
				<br />
				console.log(Object.getPrototypeOf(objWithoutPrototype)); // Output: null
				<br />
				<br />
				// Добавим свойство в объект без прототипа
				<br />
				objWithoutPrototype.someProperty = 'Hello';
				<br />
				<br />
				// Получим свойство объекта без прототипа
				<br />
				console.log(objWithoutPrototype.someProperty); // Output: Hello
			</Examples>
			<p>
				Обратите внимание, что объекты без прототипа полезны в определенных
				случаях, когда нужно создать объект, который не наследует свойства и
				методы от стандартных прототипов JavaScript. Однако такие объекты также
				не имеют доступа к методам и свойствам, которые обычно предоставляются
				стандартными прототипами, что может усложнить использование стандартных
				методов и функциональности языка.
			</p>
		</div>
	)
}

export default Question
