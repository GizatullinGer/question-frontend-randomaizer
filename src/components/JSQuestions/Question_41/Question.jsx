import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				В JavaScript параметры передаются в функцию по значению. Однако, для
				объектов и массивов эти значения являются ссылками на объекты в памяти,
				что может привести к некоторому недопониманию.
			</p>
			<p>
				При передаче примитивных типов данных (таких как числа, строки,
				логические значения) в функцию, передаётся их копия. Это означает, что
				если изменить значение параметра внутри функции, это не повлияет на
				исходное значение переменной во внешней области видимости.
			</p>
			<p>Пример передачи примитивного значения:</p>
			<Examples>
				function modifyValue(value) &#123;
				<br />
				&emsp;&emsp;value = 10;
				<br />
				&#125;
				<br />
				<br />
				let number = 5;
				<br />
				modifyValue(number);
				<br />
				console.log(number); // Output: 5, значение number не изменилось в
				результате вызова функции
			</Examples>
			<p>
				Однако, когда передаются объекты или массивы в функцию, передается
				ссылка на них. Это означает, что если изменить состояние объекта или
				массива внутри функции, эти изменения будут отражены на объекте или
				массиве за пределами функции.
			</p>
			<p>Пример передачи объекта:</p>
			<Examples>
				function modifyObject(obj) &#123;
				<br />
				&emsp;&emsp;obj.prop = 'modified';
				<br />
				&#125;
				<br />
				<br />
				const myObj = &#123; prop: 'original' &#125;;
				<br />
				modifyObject(myObj);
				<br />
				console.log(myObj.prop); // Output: 'modified', свойство объекта
				изменилось в результате вызова функции
			</Examples>
			<p>
				Таким образом, в JavaScript параметры примитивных типов передаются по
				значению, а параметры объектов и массивов передаются по ссылке. Это
				важно учитывать при написании функций и манипуляции данными внутри них.
			</p>
		</div>
	)
}

export default Question
