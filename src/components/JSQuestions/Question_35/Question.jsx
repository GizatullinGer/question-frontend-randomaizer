import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Boxing и unboxing в JavaScript связаны с преобразованием примитивных
				типов данных в их объектные обертки и обратно.
			</p>
			<p>
				<ol>
					<li>
						<b>Boxing (упаковка): </b>Процесс boxing происходит, когда
						примитивное значение преобразуется в соответствующий объект обертки.{' '}
						<br />
						Например:
						<Examples>
							const primitiveString = 'Hello'; // Примитивное значение типа
							строка
							<br />
							const stringObject = new String(primitiveString); // Boxing:
							Примитив преобразуется в объектную обертку
						</Examples>
						В этом примере строковое значение <b>'Hello'</b> (примитивный тип
						данных) упаковывается в объектную обертку <b>String</b>.
					</li>
					<li>
						<b>Unboxing (распаковка): </b>Процесс unboxing происходит, когда
						значение объектной обертки преобразуется обратно в примитивный тип
						данных. <br />
						Например:
						<Examples>
							const stringObject = new String('Hello'); // Объектная обертка
							типа строка const primitiveString = stringObject.valueOf(); //
							Unboxing: Объект распаковывается в примитивное значение
						</Examples>
						В этом примере объектная обертка <b>String (stringObject)</b>{' '}
						распаковывается в примитивное значение типа строка (
						<b>primitiveString</b>) с помощью метода <b>valueOf()</b>.
					</li>
				</ol>
			</p>
			<p>
				Boxing и unboxing происходят автоматически в JavaScript при
				необходимости преобразования примитивных типов данных в их объектные
				обертки и обратно. Это происходит, например, когда вызываются методы и
				свойства объектных оберток на примитивных значениях. JavaScript
				автоматически упаковывает примитивы в объекты, когда они требуются для
				выполнения операций, и распаковывает обратно, когда требуется
				использование примитивных значений.
			</p>
		</div>
	)
}

export default Question
