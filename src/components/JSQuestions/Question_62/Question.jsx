import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Функции в JavaScript могут быть классифицированы по их способности
				принимать другие функции в качестве аргументов или возвращать их в
				качестве результатов. Это свойство функций часто используется для
				создания более гибких и мощных конструкций в языке. Вот основные типы
				функций по их отношению к передаче и возврату функций:
			</p>
			<p>
				<ol>
					<li>
						<b>Функции высшего порядка (Higher-order functions):</b>
						<ul>
							<li>
								Функции высшего порядка - это функции, которые принимают другие
								функции в качестве аргументов и/или возвращают функции в
								качестве результатов.
							</li>
							<li>
								Они позволяют абстрагировать операции и логику обработки данных,
								делая код более универсальным и гибким.
							</li>
						</ul>
						Пример функции высшего порядка, которая принимает функцию в качестве
						аргумента:
						<Examples>
							function operate(func, a, b) &#123;
							<br />
							&emsp;&emsp;return func(a, b);
							<br />
							&#125;
							<br />
							<br />
							function add(x, y) &#123;
							<br />
							&emsp;&emsp;return x + y;
							<br />
							&#125;
							<br />
							<br />
							function subtract(x, y) &#123;
							<br />
							&emsp;&emsp;return x - y;
							<br />
							&#125;
							<br />
							<br />
							console.log(operate(add, 5, 3)); // Выведет: 8<br />
							console.log(operate(subtract, 5, 3)); // Выведет: 2
						</Examples>
					</li>
					<li>
						<b>Колбэки (Callbacks):</b>
						<ul>
							<li>
								Колбэк - это функция, передаваемая в качестве аргумента в другую
								функцию для выполнения после завершения определенной операции.
							</li>
							<li>
								Часто используется в асинхронном программировании для обратного
								вызова после завершения асинхронных задач.
							</li>
						</ul>
						Пример использования колбэков:
						<Examples>
							function operate(func, a, b) &#123;
							<br />
							&emsp;&emsp;return func(a, b);
							<br />
							&#125;
							<br />
							<br />
							function add(x, y) &#123;
							<br />
							&emsp;&emsp;return x + y;
							<br />
							&#125;
							<br />
							<br />
							function subtract(x, y) &#123;
							<br />
							&emsp;&emsp;return x - y;
							<br />
							&#125;
							<br />
							<br />
							console.log(operate(add, 5, 3)); // Выведет: 8<br />
							console.log(operate(subtract, 5, 3)); // Выведет: 2
						</Examples>
					</li>
					<li>
						<b>Функции обратного вызова (Сallback functions):</b>
						<ul>
							<li>
								Функции обратного вызова являются типом функций, передаваемых в
								качестве аргументов в другие функции для вызова в будущем.
							</li>
							<li>
								Они используются для обработки результата выполнения асинхронных
								операций, обработки событий и других асинхронных задач.
							</li>
						</ul>
					</li>
					<li>
						<b>Функции обертки (Wrapper functions):</b>
						<ul>
							<li>
								Функции обертки - это функции, которые оборачивают или изменяют
								поведение других функций.
							</li>
							<li>
								Они могут использоваться для дополнительной логики вокруг вызова
								других функций, например, для обработки исключений, логирования
								или управления аспектами.
							</li>
						</ul>
					</li>
				</ol>
			</p>
			<p>
				Эти типы функций позволяют создавать гибкие и мощные конструкции в
				JavaScript, улучшая модульность и возможности языка.
			</p>
		</div>
	)
}

export default Question
