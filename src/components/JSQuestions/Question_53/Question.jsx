import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				В JavaScript ошибки могут быть классифицированы по нескольким категориям
				в зависимости от их источника и характера. Вот основные типы ошибок в
				JavaScript:
			</p>
			<p>
				<ol>
					<li>
						<b>Ошибки синтаксиса (Syntax Errors):</b>
						<p>
							Эти ошибки возникают из-за нарушений синтаксиса языка JavaScript.
							Они возникают при компиляции кода из-за неправильного написания
							ключевых слов, операторов или структур кода. Например, отсутствие
							точки с запятой в конце строки, неправильное использование скобок
							и т. д.
						</p>
					</li>
					<li>
						<b>Ошибки выполнения (Runtime Errors):</b>
						<p>
							Эти ошибки возникают во время выполнения программы и могут быть
							вызваны различными причинами, такими как:
							<ul>
								<li>
									<b>ReferenceError: </b>Попытка использования переменной или
									функции, которая не была определена.
								</li>
								<li>
									<b>TypeError: </b>Обращение к свойству или методу объекта,
									которое не существует, или попытка выполнения операции с
									неподходящим типом данных.
								</li>
								<li>
									<b>RangeError: </b>Выход за пределы допустимого диапазона
									значений, например, превышение максимального размера массива
									или вызов рекурсии без базового случая.
								</li>
							</ul>
						</p>
					</li>
					<li>
						<b>Ошибки логики (Logical Errors):</b>
						<p>
							Эти ошибки не приводят к возникновению сообщений об ошибках, но
							изменяют ожидаемое поведение программы. Они возникают из-за
							неправильного решения или логики в коде. Программа может
							выполняться без ошибок, но результат ее работы будет неверным.
						</p>
					</li>
					<li>
						<b>
							Ошибки времени выполнения асинхронного кода (Asynchronous Errors):
						</b>
						<p>
							Связаны с выполнением асинхронных операций, таких как работа с
							колбэками, промисами или async/await. Эти ошибки могут возникнуть
							из-за неправильного обращения с асинхронными вызовами, обработки
							ошибок или отсутствия обработки исключений.
						</p>
					</li>
				</ol>
			</p>
			<p>
				Обработка ошибок важна для написания надежного и стабильного кода. В
				JavaScript ошибки можно обрабатывать с помощью конструкций{' '}
				<b>try...catch</b> для перехвата и обработки исключений, а также
				использования методов, таких как console.error для вывода сообщений об
				ошибках в консоль разработчика.
			</p>
		</div>
	)
}

export default Question
