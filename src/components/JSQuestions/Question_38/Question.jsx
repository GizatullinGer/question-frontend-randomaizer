/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Глубокая и поверхностная копии объектов отличаются тем, как они копируют
				вложенные структуры в объекте.
			</p>
			<p>
				<ol>
					<li>
						<b>Поверхностная (Shallow) копия:</b>
						<ul>
							<li>
								При создании поверхностной копии объекта копируются только
								верхний уровень свойств объекта. Если у объекта есть вложенные
								объекты или массивы, то они не копируются, а просто ссылки на
								них копируются в новый объект.
							</li>
							<li>
								Изменения вложенных объектов в копии будут отражаться в
								оригинале, так как они ссылаются на одни и те же вложенные
								объекты.
							</li>
						</ul>
						Пример поверхностной копии:
						<Examples>
							const originalObj = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;
							<br />
							<br />
							// Создание поверхностной копии
							<br />
							const shallowCopy = Object.assign({}, originalObj);
							<br />
							<br />
							// Изменение значения вложенного объекта в копии
							<br />
							shallowCopy.b.c = 3;
							<br />
							<br />
							console.log(originalObj.b.c); // Output: 3, изменения отражаются в
							оригинальном объекте
						</Examples>
					</li>
					<li>
						<b>Глубокая (Deep) копия:</b>
						<ul>
							<li>
								При создании глубокой копии объекта копируются все уровни
								свойств, включая вложенные объекты и массивы. Это создает
								полностью независимую копию всех вложенных структур данных.
							</li>
							<li>
								Изменения в глубокой копии не влияют на оригинал и наоборот.
							</li>
						</ul>
						Пример глубокой копии:
						<Examples>
							const originalObj = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;
							<br />
							<br />
							// Создание глубокой копии с использованием JSON
							<br />
							const deepCopy = JSON.parse(JSON.stringify(originalObj));
							<br />
							<br />
							// Изменение значения вложенного объекта в копии
							<br />
							deepCopy.b.c = 3;
							<br />
							<br />
							console.log(originalObj.b.c); // Output: 2, изменения в копии не
							отражаются в оригинальном объекте
						</Examples>
					</li>
				</ol>
			</p>
			<p>
				Создание поверхностной копии можно осуществить с помощью{' '}
				<b>Object.assign()</b>
				или оператора распространения <b>(...)</b>, тогда как для создания
				глубокой копии часто используют методы, такие как{' '}
				<b>JSON.stringify()</b> в комбинации с<b>JSON.parse()</b>. Однако,
				следует быть осторожным при использовании
				<b>JSON.stringify()</b> и <b>JSON.parse()</b>, так как они не сохраняют
				некоторые типы данных (например, функции или специальные объекты, такие
				как объекты с циклическими ссылками) и могут не подходить для всех
				ситуаций. Существуют и другие библиотеки (например, lodash) и методы,
				которые могут быть использованы для создания глубоких копий объектов с
				большей гибкостью и учетом сложных структур данных.
			</p>
		</div>
	)
}

export default Question
