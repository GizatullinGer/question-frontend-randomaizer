import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				<b>`var`</b>, <b>`let`</b> и <b>`const`</b> - это ключевые слова для
				объявления переменных в JavaScript, и каждое из них имеет разные
				свойства и правила области видимости. Вот основные различия между ними:
			</p>
			<ol>
				<li>
					<p>
						<b>var:</b>
					</p>
					<p>
						<ul>
							<li>
								Имеет функциональную область видимости (function scope) или
								глобальную область видимости (если объявлена за пределами
								функции).
							</li>
							<li>
								Подвержена поднятию (hoisting), что означает, что объявление
								переменной будет поднято вверх в область видимости, но ей будет
								присвоено значение только в месте, где она определена.
							</li>
							<li>
								Может быть переобъявлена и перезаписана в одной и той же области
								видимости.
							</li>
						</ul>
						<Examples>
							var x = 10;
							<br />
							var x = 20; // Валидно, переобъявление
							<br />x = 30; // Валидно, перезапись
						</Examples>
					</p>
				</li>
				<li>
					<p>
						<b>let:</b>
					</p>
					<p>
						<ul>
							<li>
								Имеет блочную область видимости (block scope), что означает, что
								она видима только в пределах блока, в котором она объявлена.
							</li>
							<li>
								Подвержена поднятию, но в отличие от var, переменная остается
								"неинициализированной" до момента, когда она будет объявлена в
								коде.
							</li>
							<li>
								Нельзя переобъявлять переменную с использованием let в одной и
								той же области видимости.
							</li>
						</ul>
						<Examples>
							let y = 10;
							<br />
							let y = 20; // Ошибка, переобъявление не допускается
							<br />y = 30; // Валидно, перезапись
						</Examples>
					</p>
				</li>
				<li>
					<p>
						<b>const:</b>
					</p>
					<p>
						<ul>
							<li>Также имеет блочную область видимости.</li>
							<li>
								Подвержена поднятию и, как и let, остается
								"неинициализированной" до момента объявления.
							</li>
							<li>
								Переменные, объявленные как const, должны быть инициализированы
								при объявлении и не могут быть переопределены после этого.
							</li>
							<li>
								Для объектов и массивов, объявленных как const, можно изменять
								их свойства и элементы, но нельзя присваивать новое значение
								самой переменной.
							</li>
						</ul>
						<Examples>
							const z = 10;
							<br />
							const z = 20; // Ошибка, переобъявление не допускается
							<br />z = 30; // Ошибка, нельзя перезаписать const переменную
						</Examples>
					</p>
				</li>
			</ol>
			<p>
				В целом, рекомендуется использовать <b>`const`</b> для переменных,
				которые не будут переопределяться, и <b>`let`</b> для переменных,
				которые могут изменяться. <b>`var`</b> стоит избегать в современном коде
				в пользу более предсказуемых и локальных областей видимости let и const.
			</p>
		</div>
	)
}

export default Question
