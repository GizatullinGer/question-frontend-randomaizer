/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Intersection Observer - это API веб-браузера, который предоставляет
				способ асинхронного отслеживания изменений в пересечении целевого
				элемента с контейнером (обычно видимой областью окна браузера или
				другого элемента).
			</p>
			<p>
				Основная цель Intersection Observer заключается в том, чтобы
				отслеживать, когда определенный целевой элемент становится видимым или
				скрывается внутри контейнера просмотра. Это полезно для реализации
				различных эффектов на странице, загрузки изображений по мере прокрутки,
				отслеживания видимости элементов, аналитики просмотра и других подобных
				сценариев.
			</p>
			<p>Основные концепции Intersection Observer:</p>
			<p>
				<ol>
					<li>
						<b>Observer (наблюдатель):</b> <br />
						Intersection Observer создает экземпляр "наблюдателя", который
						следит за целевым элементом (или элементами) и оповещает об
						изменениях в его видимости.
					</li>
					<li>
						<b>Target Element (целевой элемент):</b> <br />
						Целевой элемент - это DOM элемент, который наблюдатель отслеживает
						относительно контейнера просмотра.
					</li>
					<li>
						<b>Root (корневой элемент):</b> <br />
						Элемент, который является контейнером, относительно которого
						отслеживается пересечение. По умолчанию это видимая область окна
						браузера.
					</li>
					<li>
						<b>Threshold (порог):</b> <br />
						Порог определяет процент пересечения, необходимый для того, чтобы
						наблюдатель считал элемент видимым. Например, если установлен порог
						в 0.5, наблюдатель будет уведомлен, когда половина элемента станет
						видимой.
					</li>
					<li>
						<b>Callback (обратный вызов):</b> <br />
						При изменении видимости целевого элемента Intersection Observer
						вызывает заданный обратный вызов (callback), позволяя вам выполнять
						определенные действия при пересечении целевого элемента с
						контейнером просмотра.
					</li>
				</ol>
			</p>
			<p>Пример использования Intersection Observer:</p>
			<Examples>
				// Создаем новый экземпляр Intersection Observer и передаем обратный
				вызов
				<br />
				let observer = new IntersectionObserver(callback, options);
				<br />
				<br />
				// Настройка наблюдения за элементом
				<br />
				let targetElement = document.querySelector('.target');
				<br />
				observer.observe(targetElement);
				<br />
				<br />
				// Обратный вызов, который будет выполнен при изменении видимости
				элемента
				<br />
				function callback(entries, observer) &#123;
				<br />
				&emsp;&emsp;entries.forEach(entry ={'>'} &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;if (entry.isIntersecting) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;// Логика при пересечении элемента с
				контейнером просмотра
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;console.log('Элемент видим');
				<br />
				&emsp;&emsp;&emsp;&emsp;&#125; else &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;// Логика, когда элемент больше не
				видим
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;console.log('Элемент скрыт');
				<br />
				&emsp;&emsp;&emsp;&emsp;&#125;
				<br />
				&emsp;&emsp;&#125;);
				<br />
				&#125;
			</Examples>
			<p>
				Intersection Observer дает возможность эффективно отслеживать и
				реагировать на изменения видимости элементов, что делает его мощным
				инструментом для реализации различных веб-функций, связанных с
				видимостью элементов в браузере.
			</p>
		</div>
	)
}

export default Question
