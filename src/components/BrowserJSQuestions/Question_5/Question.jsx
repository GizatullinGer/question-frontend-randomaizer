import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				В контексте DOM-элементов есть разница между атрибутами (
				<b>attribute</b>) и свойствами (<b>property</b>):
			</p>
			<h3>Атрибуты (Attributes):</h3>
			<p>
				<ul>
					<li>
						Атрибуты представляют собой значения, указанные в HTML-разметке
						элемента.
					</li>
					<li>
						Они являются статическими значениями, указанными в HTML-коде и могут
						быть изменены программно.
					</li>
					<li>
						Изменение атрибутов обычно отражается в соответствующем свойстве
						элемента и наоборот, но не всегда. Например, изменение атрибута{' '}
						<b>href</b> на элементе{' '}
						<b>
							{'<'}a{'>'}
						</b>{' '}
						обычно отразится на свойстве <b>element.href</b>, но это не
						гарантировано для всех атрибутов и свойств.
					</li>
					<li>
						Они могут быть получены с помощью метода <b>getAttribute()</b> и
						установлены с помощью <b>setAttribute()</b>.
					</li>
				</ul>
			</p>
			<h3>Свойства (Properties):</h3>
			<p>
				<ul>
					<li>
						Свойства представляют собой текущее состояние элемента внутри
						JavaScript.
					</li>
					<li>
						Они обновляются динамически и отражают текущее состояние элемента.
					</li>
					<li>
						Изменение свойств обычно отражается на соответствующем атрибуте, но
						также не всегда. Например, установка свойства <b>element.href</b>{' '}
						изменит атрибут <b>href</b> у элемента{' '}
						<b>
							{'<'}a{'>'}
						</b>
						, но не всегда синхронизируется обратно с атрибутом.
					</li>
					<li>
						Они могут быть доступны и изменены напрямую через JavaScript,
						например, <b>element.href</b> или <b>element.textContent</b>.
					</li>
				</ul>
			</p>
			<p>
				Важно отметить, что хотя атрибуты и свойства часто взаимосвязаны, они не
				всегда одинаковы. Некоторые свойства элементов могут быть автоматически
				синхронизированы с атрибутами, другие — нет. Иногда изменение атрибута
				может не привести к изменению соответствующего свойства и наоборот.
			</p>
			<p>
				Например, при работе с <b>input</b> элементами:
			</p>
			<p>
				<ul>
					<li>
						<b>value </b>является свойством элемента и отображает текущее
						значение ввода.
					</li>
					<li>
						<b>value </b>свойство может быть изменено программно (
						<b>element.value = 'Новое значение';</b>), но это не обязательно
						изменит атрибут <b>value</b> в HTML.
					</li>
					<li>
						Для того чтобы установить атрибут <b>value</b>, вы можете
						использовать <b>setAttribute('value', 'Новое значение');</b>, но это
						не обязательно обновит свойство <b>value</b>.
					</li>
				</ul>
			</p>
			<p>
				В общем, при взаимодействии с DOM лучше использовать свойства для
				доступа и изменения значений элементов, если это возможно, так как
				свойства часто отражают текущее состояние элемента, в то время как
				атрибуты могут быть статичными и не всегда обновляются сразу.
			</p>
		</div>
	)
}

export default Question
