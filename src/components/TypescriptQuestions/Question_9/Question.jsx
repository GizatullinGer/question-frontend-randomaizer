import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				В TypeScript есть два основных способа определения пользовательских
				типов: <b>type</b> (тип) и <b>interface</b> (интерфейс). Оба
				используются для создания пользовательских типов данных, однако у них
				есть некоторые различия в синтаксисе и возможностях.
			</p>
			<div>
				<h3>Интерфейсы (Interfaces)</h3>
				<ul>
					<li>
						<p>
							<b>Синтаксис: </b>Интерфейсы представляют собой именованные
							структуры данных, определяющие контракты для объектов. Они
							описывают форму объекта, указывая на типы свойств и их возможные
							значения.
						</p>
						<p>
							<b>Пример интерфейса:</b>
						</p>
						<Examples>
							interface Person &#123;
							<br />
							&emsp;&emsp;name: string;
							<br />
							&emsp;&emsp;age: number;
							<br />
							&#125;
						</Examples>
					</li>
					<li>
						<p>
							<b>Расширение: </b>Интерфейсы могут быть расширены для объединения
							нескольких интерфейсов в один, обеспечивая гибкость при построении
							более сложных структур данных.
						</p>
						<p>
							<b>Пример расширения интерфейса:</b>
						</p>
						<Examples>
							interface Student extends Person &#123;
							<br />
							&emsp;&emsp;grade: number;
							<br />
							&#125;
						</Examples>
					</li>
				</ul>
				<h3>Типы (Types)</h3>
				<ul>
					<li>
						<p>
							<b>Синтаксис: </b>Типы создаются с помощью ключевого слова{' '}
							<b>type</b> и могут описывать различные структуры данных, включая
							примитивные типы, объединения, пересечения типов и многое другое.
						</p>
						<p>
							<b>Пример типа:</b>
						</p>
						<Examples>
							type Person = &#123;
							<br />
							&emsp;&emsp;name: string;
							<br />
							&emsp;&emsp;age: number;
							<br />
							&#125;
						</Examples>
					</li>
					<li>
						<p>
							<b>Возможности объединения и пересечения: </b>Типы позволяют
							выполнять операции объединения <b>(|)</b> и пересечения <b>(&)</b>{' '}
							типов для создания более сложных типов.
						</p>
						<p>
							<b>Пример объединения и пересечения типов:</b>
						</p>
						<Examples>
							type Admin = &#123;
							<br />
							&emsp;&emsp;name: string;
							<br />
							&emsp;&emsp;role: 'admin';
							<br />
							&#125;;
							<br />
							<br />
							type Editor = &#123;
							<br />
							&emsp;&emsp;name: string;
							<br />
							&emsp;&emsp;role: 'editor';
							<br />
							&#125;;
							<br />
							<br />
							type User = Admin | Editor; // Объединение типов
							<br />
							type AdminEditor = Admin & Editor; // Пересечение типов
						</Examples>
					</li>
				</ul>
			</div>
			<p>
				<ol>
					<li>
						<b>Способность к объединению и пересечению: </b>Типы позволяют
						выполнять более широкий спектр операций с типами данных, таких как
						объединения и пересечения, в то время как интерфейсы описывают форму
						объектов.
					</li>
					<li>
						<b>Удобство при работе с объектами: </b>Интерфейсы обычно
						используются для описания формы объектов, что делает их удобными в
						работе с данными, а типы могут использоваться для более общих
						определений типов данных.
					</li>
					<li>
						<b>Гибкость и расширяемость: </b>Интерфейсы поддерживают расширение,
						позволяя комбинировать несколько интерфейсов в один. В то время как
						типы позволяют выполнить более широкий спектр операций с типами
						данных.
					</li>
				</ol>
			</p>
			<p>
				Оба <b>type</b> и <b>interface</b> могут быть полезны в разных сценариях
				разработки на TypeScript, и выбор между ними может зависеть от
				предпочтений и конкретных требований вашего проекта.
			</p>
		</div>
	)
}

export default Question
