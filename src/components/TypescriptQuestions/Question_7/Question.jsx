import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Декораторы (decorators) - это особая функциональность TypeScript (и
				JavaScript, начиная с ECMAScript 2017), которая позволяет добавлять
				метаданные к классам, методам, свойствам или параметрам функций.
				Декораторы позволяют модифицировать или расширять поведение этих
				элементов в процессе выполнения или компиляции кода.
			</p>
			<p>
				Декораторы представляют собой функции, применяемые к различным частям
				кода и применяемые с использованием символа @ перед объявлением
				элемента. Они могут быть использованы для изменения поведения или
				аннотирования элементов, обычно с целью добавления дополнительной
				функциональности.
			</p>
			<p>Примеры использования декораторов:</p>
			<ol>
				<li>
					<b>Декоратор класса:</b>
					<Examples>
						@decoratorFunction
						<br />
						class MyClass &#123;
						<br />
						&emsp;&emsp;// ...
						<br />
						&#125;
					</Examples>
				</li>
				<li>
					<b>Декоратор метода:</b>
					<Examples>
						class MyClass &#123;
						<br />
						&emsp;&emsp;@decoratorFunction
						<br />
						&emsp;&emsp;myMethod() &#123;
						<br />
						&emsp;&emsp;&emsp;&emsp;// ...
						<br />
						&emsp;&emsp;&#125;
						<br />
						&#125;
					</Examples>
				</li>
				<li>
					<b>Декоратор свойства: </b>
					<Examples>
						class MyClass &#123;
						<br />
						&emsp;&emsp;@decoratorFunction
						<br />
						&emsp;&emsp;myProperty: string;
						<br />
						&#125;
					</Examples>
				</li>
				<li>
					<b>Декоратор параметра метода:</b>
					<Examples>
						class MyClass &#123;
						<br />
						&emsp;&emsp;myMethod(@decoratorFunction parameter: string) &#123;
						<br />
						&emsp;&emsp;&emsp;&emsp;// ...
						<br />
						&emsp;&emsp;&#125;
						<br />
						&#125;
					</Examples>
				</li>
			</ol>
			<p>
				Декораторы могут использоваться для различных целей, таких как
				добавление логики до или после выполнения функций, создание middleware
				для обработки запросов, управление доступом к методам или свойствам, а
				также для аннотирования и дополнения информации о классах или методах.
			</p>
			<p>
				Хотя декораторы предоставляют мощный инструмент для изменения и
				расширения функциональности приложений, важно использовать их осторожно,
				так как их избыточное использование может привести к усложнению кода и
				ухудшению его читаемости. Декораторы - это мощное средство, но требует
				здравого смысла в их применении для облегчения понимания и поддержки
				кода.
			</p>
		</div>
	)
}

export default Question
