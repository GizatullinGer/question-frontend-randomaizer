import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Абстрактные классы и интерфейсы - это два различных концепта в
				объектно-ориентированном программировании, каждый из которых имеет свои
				особенности.
			</p>
			<h3>Абстрактный класс (abstract class):</h3>
			<p>
				<ol>
					<li>
						<b>Определение: </b>Абстрактный класс является классом, который не
						может быть инстанциирован напрямую. Он может содержать абстрактные
						методы, которые не имеют реализации в самом классе.
					</li>
					<li>
						<b>Реализация методов: </b>Абстрактные классы могут содержать как
						абстрактные методы, так и обычные методы с реализацией.
					</li>
					<li>
						<b>Наследование: </b>Другие классы могут наследовать от абстрактного
						класса. Подклассы должны предоставлять реализацию для всех
						абстрактных методов, иначе они также должны быть объявлены как
						абстрактные.
					</li>
					<li>
						<b>Ограничение на наследование: </b>В языках, поддерживающих только
						одиночное наследование, абстрактный класс может создать ограничение,
						поскольку подкласс может наследовать только от одного абстрактного
						класса.
					</li>
				</ol>
			</p>
			<h3>Интерфейс (interface):</h3>
			<p>
				<ol>
					<li>
						<b>Определение: </b>Интерфейс представляет собой контракт,
						описывающий структуру класса, но не содержит реализации. Он
						определяет, какие свойства и методы должны быть реализованы классом,
						который реализует этот интерфейс.
					</li>
					<li>
						<b>Без реализации методов: </b>Интерфейс содержит только сигнатуры
						методов и свойств без их реализации. Класс, реализующий интерфейс,
						должен предоставить реализацию для всех методов и свойств, описанных
						в интерфейсе.
					</li>
					<li>
						<b>Множественное наследование: </b>Класс может реализовать несколько
						интерфейсов одновременно. Это позволяет классу обеспечивать
						реализацию для различных контрактов, определенных в разных
						интерфейсах.
					</li>
				</ol>
			</p>
			<h3>Когда использовать:</h3>
			<p>
				<ul>
					<li>
						Используйте абстрактные классы, когда нужно предоставить базовую
						реализацию методов и дать возможность подклассам переопределить их.
					</li>
					<li>
						Используйте интерфейсы для определения контрактов, описывающих
						структуру класса без реализации. Интерфейсы удобны, когда классы
						различны по своему назначению, но имеют общие методы или свойства.
					</li>
				</ul>
			</p>
			<p>
				Оба концепта - абстрактные классы и интерфейсы - помогают в разработке,
				но их использование зависит от конкретных потребностей проекта и
				предпочтений разработчика.
			</p>
		</div>
	)
}

export default Question
