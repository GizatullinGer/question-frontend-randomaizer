import React from 'react'

const Question_1 = () => {
	return (
		<div>
			<p>
				Улучшение производительности веб-страницы при использовании HTML
				включает в себя несколько аспектов. Вот некоторые из них:
			</p>
			<p>
				<ol>
					<li>
						<b>Оптимизация изображений: </b>Используйте сжатые изображения,
						форматы с поддержкой сжатия (например, WebP), атрибут srcset для
						адаптивных изображений и размеры изображений в соответствии с
						требованиями вашей страницы.
					</li>
					<li>
						<b>Ленивая загрузка изображений: </b>Загружайте изображения только
						когда они попадают в область видимости (например, используя атрибут
						loading="lazy" или JavaScript-библиотеки для ленивой загрузки).
					</li>
					<li>
						<b>Минимизация и оптимизация CSS и JavaScript: </b>Объединяйте и
						минимизируйте файлы CSS и JavaScript, чтобы уменьшить объем
						загружаемых данных. Используйте сжатие и загрузку скриптов
						асинхронно (async и defer).
					</li>
					<li>
						<b>Использование семантического HTML: </b>Используйте семантические
						теги для правильной структуры страницы. Это поможет браузеру и
						поисковым системам лучше понимать ваш контент.
					</li>
					<li>
						<b>Отложенная загрузка ресурсов: </b>Загружайте ресурсы (например,
						скрипты) только когда они необходимы, чтобы ускорить начальную
						загрузку страницы.
					</li>
					<li>
						<b>Кэширование ресурсов: </b>Используйте HTTP-заголовки кэширования,
						чтобы ресурсы (CSS, JavaScript, изображения) сохранялись локально на
						стороне клиента, уменьшая время загрузки при повторном посещении
						страницы.
					</li>
					<li>
						<b>Производительные формы: </b> Используйте атрибуты autocomplete,
						novalidate, правильные типы полей ввода и <b>label</b> для улучшения
						производительности и доступности форм.
					</li>
					<li>
						<b>Удаление неиспользуемого кода: </b>Периодически анализируйте и
						удаляйте неиспользуемые или устаревшие части кода, чтобы уменьшить
						объем загружаемых данных.
					</li>
					<li>
						<b>Применение атрибута defer для скриптов: </b>Используйте defer для
						скриптов, чтобы они загружались параллельно, но выполнялись только
						после загрузки и построения DOM.
					</li>
					<li>
						<b>Использование HTTP/2 и HTTPS: </b>Переход на HTTP/2 для поддержки
						множественных запросов на одном соединении, а также использование
						HTTPS для безопасной и более эффективной передачи данных.
					</li>
				</ol>
			</p>
		</div>
	)
}

export default Question_1
