import React from 'react'

const Question_1 = () => {
	return (
		<div>
			<p>
				Вот некоторые плюсы и минусы элементов <b>&lt;canvas&gt;</b> и{' '}
				<b>&lt;svg&gt;</b>:
			</p>
			<p>
				<b>canvas:</b>
			</p>
			<p>
				<i>Плюсы:</i>
			</p>
			<p>
				<ol>
					<li>
						<b>Гибкость анимации: </b>Позволяет создавать сложные анимации и
						игры, поскольку каждый пиксель контролируется программно.
					</li>
					<li>
						<b>Работа с растровой графикой: </b>Оптимизирован для работы с
						большими объемами растровой графики и выполнения сложных операций
						рисования.
					</li>
					<li>
						<b>Широкий выбор возможностей: </b>Позволяет создавать сложные
						графические объекты и изображения с помощью низкоуровневых операций
						рисования.
					</li>
				</ol>
			</p>
			<p>
				<i>Минусы:</i>
			</p>
			<p>
				<ol>
					<li>
						<b>Отсутствие масштабируемости: </b>Графика не масштабируется без
						потери качества, так как каждый пиксель фиксирован.
					</li>
					<li>
						<b>Сложность для создания векторной графики: </b>Неудобен для
						создания векторной графики, так как не хранит графику в виде
						объектов DOM.
					</li>
					<li>
						<b>Более высокий уровень сложности: </b>Требует более высокого
						уровня навыков для создания сложной графики и анимаций.
					</li>
				</ol>
			</p>
			<p>
				<b>svg:</b>
			</p>
			<p>
				<i>Плюсы:</i>
			</p>
			<p>
				<ol>
					<li>
						<b>Масштабируемость: </b>Графика сохраняет качество при изменении
						масштаба, так как представляет векторную графику.
					</li>
					<li>
						<b>Доступность и манипулируемость: </b>Графика хранится как объекты
						DOM, что делает их доступными для манипуляций при помощи JavaScript.
					</li>
					<li>
						<b>Создание векторной графики: </b>Удобен для создания простых и
						сложных векторных изображений, диаграмм и иллюстраций.
					</li>
				</ol>
			</p>
			<p>
				<i>Минусы:</i>
			</p>
			<p>
				<ol>
					<li>
						<b>Производительность при большом объеме данных: </b>Может стать
						менее производительным при обработке больших объемов сложной
						векторной графики или при выполнении большого количества изменений.
					</li>
					<li>
						<b>Ограничения для сложных анимаций: </b>Для сложных анимаций может
						потребоваться больше усилий, по сравнению с <b>&lt;canvas&gt;</b>.
					</li>
					<li>
						<b>Неудобство для работы с растровой графикой: </b>Не оптимизирован
						для обработки растровых данных и сложных фильтров.
					</li>
				</ol>
			</p>
			<p>
				Оба подхода имеют свои преимущества и недостатки, и выбор между ними
				зависит от конкретных потребностей проекта.
			</p>
		</div>
	)
}

export default Question_1
