import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Инверсия наследования (Inheritance Inversion) - это концепция,
				применяемая в контексте паттерна проектирования компонентов в React,
				основанная на передаче поведения компонента через пропсы (props) вместо
				использования наследования классов.
			</p>
			<p>
				В традиционном наследовании классов объекты наследуют поведение (методы
				и свойства) от своих родительских классов. Однако, в React инверсия
				наследования подразумевает отказ от использования наследования классов в
				пользу передачи функциональности через пропсы, что делает компоненты
				более гибкими и легкими для поддержки и переиспользования.
			</p>
			<p>Преимущества инверсии наследования в React:</p>
			<ol>
				<li>
					<b>Композиция вместо наследования: </b>Использование композиции
					позволяет создавать более гибкие и переиспользуемые компоненты,
					комбинируя их поведение через композицию пропсов, контекста или
					рендер-пропсов (render props).
				</li>
				<li>
					<b>Улучшенная читаемость и поддержка: </b>Использование инверсии
					наследования делает компоненты более прозрачными и понятными,
					поскольку вся функциональность компонента становится явной и
					определяется в его пропсах.
				</li>
				<li>
					<b>Избежание проблем, связанных с множественным наследованием: </b>
					Инверсия наследования может помочь избежать проблем, возникающих при
					множественном наследовании в классическом подходе, таких как конфликты
					иерархии наследования.
				</li>
			</ol>
			<p>
				Пример использования инверсии наследования в React может включать в себя
				передачу функций или компонентов через пропсы для определения
				определенного поведения, которое будет использоваться внутри других
				компонентов.
			</p>
			<Examples>
				const ToggleButton = (&#123; onToggle, text &#125;) ={'>'} &#123;
				<br />
				&emsp;&emsp;return (<br />
				&emsp;&emsp;&emsp;&emsp;{'<'}button onClick=&#123;onToggle&#125;{'>'}
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&#123;text&#125;
				<br />
				&emsp;&emsp;&emsp;&emsp;{'<'}/button{'>'}
				<br />
				&emsp;&emsp;);
				<br />
				&#125;;
				<br />
				<br />
				const App = () ={'>'} &#123;
				<br />
				&emsp;&emsp;const handleToggle = () ={'>'} &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;// Логика переключения
				<br />
				&emsp;&emsp;&#125;;
				<br />
				<br />
				&emsp;&emsp;return (<br />
				&emsp;&emsp;&emsp;&emsp;{'<'}div{'>'}
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{'<'}ToggleButton
				onToggle=&#123;handleToggle&#125; text="Нажми меня" /{'>'}
				<br />
				&emsp;&emsp;&emsp;&emsp;{'<'}/div{'>'}
				<br />
				&emsp;&emsp;);
				<br />
				&#125;;
			</Examples>
			<p>
				Это лишь один из способов использования инверсии наследования в React
				для передачи функциональности и поведения между компонентами. Такой
				подход делает код более явным и улучшает его поддержку и читаемость.
			</p>
		</div>
	)
}

export default Question
