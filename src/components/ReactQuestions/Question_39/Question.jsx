import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				В React есть два основных способа создания компонентов: классовые
				компоненты и функциональные компоненты. Вот основные различия между
				ними:
			</p>
			<h3>1. Синтаксис:</h3>
			<ul>
				<li>
					<b>Классовые компоненты</b>- это ES6 классы, расширяющие
					React.Component. Они имеют методы жизненного цикла React, такие как
					render(), componentDidMount(), componentDidUpdate() и другие.
				</li>
				<li>
					<b>Функциональные компоненты</b>- это функции, возвращающие
					React-элементы. В них не используются методы жизненного цикла
					компонента, но они позволяют использовать хуки React, такие как
					useState, useEffect и другие.
				</li>
			</ul>
			<h3>2. Использование Хуков:</h3>
			<ul>
				<li>
					<b>Хуки (Hooks) </b>- это функции, которые позволяют использовать
					состояние и другие возможности React в функциональных компонентах. Они
					не поддерживаются в классовых компонентах. Функциональные компоненты с
					хуками позволяют использовать состояние, эффекты, контекст и другие
					возможности React.
				</li>
			</ul>
			<h3>3. Объявление Состояния:</h3>
			<ul>
				<li>
					<b>Классовые компоненты</b> используют this.state для хранения
					состояния компонента.
				</li>
				<li>
					<b>Функциональные компоненты </b>используют хук useState для
					добавления локального состояния в функциональные компоненты.
				</li>
			</ul>
			<h4>4. Легкость и Читаемость:</h4>
			<ul>
				<li>
					<b>Функциональные компоненты </b>обычно считаются более легкими и
					имеют более простой синтаксис, что делает их легче для понимания и
					чтения.
				</li>
				<li>
					<b>Классовые компоненты </b>могут быть более сложными для понимания
					из-за использования this, наследования и разных методов жизненного
					цикла.
				</li>
			</ul>
			<p>
				В настоящее время функциональные компоненты с использованием хуков
				предпочтительны для большинства сценариев, так как они обладают большей
				простотой и гибкостью. Однако, классовые компоненты все еще используются
				в старом коде или там, где требуется использование методов жизненного
				цикла, которые пока не поддерживаются хуками.
			</p>
		</div>
	)
}

export default Question
