import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				В мире React (и во многих других фреймворках или библиотеках), термины
				"компонент" и "контейнер" часто используются для описания разных типов
				компонентов и их функциональности в архитектуре приложения.
			</p>
			<h3>Компоненты:</h3>
			<ol>
				<li>
					<b>Функциональные компоненты: </b>Это компоненты, которые основаны на
					функциях. Они принимают пропсы (props) и возвращают JSX. Используются
					в основном для простых компонентов без состояния (stateless) до
					появления хуков.
				</li>
				<li>
					<b>Классовые компоненты: </b>Это компоненты, которые наследуют
					функциональность от <b>React.Component</b> и могут иметь внутреннее
					состояние. Они содержат методы жизненного цикла и используются для
					управляемых (stateful) компонентов.
				</li>
			</ol>
			<h3>Контейнеры:</h3>
			<ol>
				<li>
					<b>Контейнеры (Container Components): </b>Это компоненты, которые
					обычно отвечают за управление данными, состоянием и логикой
					приложения. Они могут содержать в себе один или несколько компонентов
					и предоставлять им данные через пропсы. Контейнеры могут быть
					классовыми или функциональными компонентами и часто используются для
					управления состоянием приложения, подписки на данные или обработки
					событий.
				</li>
				<li>
					<b>HOC (Higher-Order Components):</b>Это функции, которые принимают
					компонент и возвращают новый компонент с дополнительной
					функциональностью. Они могут использоваться для повторного
					использования логики между различными компонентами.
				</li>
			</ol>
			<p>
				Кратко говоря, компоненты представляют собой строительные блоки
				пользовательского интерфейса, а контейнеры - это компоненты, которые
				обычно отвечают за управление данными, состоянием и логикой приложения.
				Контейнеры могут быть реализованы как классовые, функциональные
				компоненты или HOC в зависимости от конкретной задачи. Обычно разделение
				на компоненты и контейнеры помогает улучшить структуру и управляемость
				кода при разработке React-приложений.
			</p>
		</div>
	)
}

export default Question
