import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				В ECMAScript 6 (ES6) символ (Symbol) - это новый примитивный тип данных,
				представляющий уникальное и неизменяемое значение. Символы предназначены
				для создания уникальных свойств объектов, которые не будут случайно
				пересекаться с другими свойствами объектов. Они были введены в ES6 как
				способ предотвращения конфликтов имен и добавления "скрытых" или
				специфичных для системы свойств объектов.
			</p>
			<p>Основные особенности символов (Symbols) в ES6:</p>
			<ol>
				<li>
					<b>Уникальность</b>: Каждый символ создается как уникальное значение и
					никогда не будет равен другому символу, даже если их описания (имена)
					одинаковы.
				</li>
				<li>
					<b>Неизменяемость</b>: Символы неизменяемы, и после их создания нельзя
					изменить их значение или повторно создать символ с тем же описанием.
				</li>
				<li>
					<b>Использование в качестве ключей</b>: Символы часто используются в
					качестве ключей для создания "приватных" или специфичных для системы
					свойств объектов, так как они не будут случайно пересекаться с другими
					ключами.
				</li>
			</ol>
			<p>Создание символа:</p>
			<Examples>const mySymbol = Symbol('Описание символа');</Examples>
			<p>
				Здесь <b>'Описание символа'</b> является необязательной строкой описания
				символа, которая может быть полезна для отладки, но не влияет на его
				уникальность.
			</p>
			<p>Пример использования символа в объекте:</p>
			<Examples>
				const obj = {};<br />
				const mySymbol = Symbol('mySymbol');
				<br />
				<br />
				obj[mySymbol] = 'Значение для символа';
				<br />
				<br />
				console.log(obj[mySymbol]); // Вывод: 'Значение для символа'
			</Examples>
			<p>
				Символы часто используются в стандартных объектах и интерфейсах языка
				JavaScript, чтобы создавать "скрытые" свойства или свойства, которые не
				будут пересекаться с пользовательскими свойствами объектов. Они
				обеспечивают безопасность и уникальность в коде, что делает их полезными
				для разработки библиотек и фреймворков, а также для предотвращения
				конфликтов имен в больших проектах.
			</p>
		</div>
	)
}

export default Question
