import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				<b>Set</b>, <b>Map</b>, <b>WeakMap</b> и <b>WeakSet</b> - это коллекции
				данных, предоставляемые JavaScript для хранения уникальных значений и
				связанных данных. Они представляют собой специализированные структуры
				данных, которые могут быть полезны в различных сценариях.
			</p>
			<p>
				<ol>
					<li>
						<b>Set:</b>
						<ul>
							<li>
								<b>Set</b> представляет собой коллекцию уникальных значений
								(примитивных или объектных).
							</li>
							<li>
								Значения в <b>Set</b> хранятся в порядке их добавления.
							</li>
							<li>
								<b>Set</b> не допускает дублирования значений, поэтому каждое
								значение может быть представлено только один раз.
							</li>
							<li>
								Полезен для удаления дубликатов в массивах и быстрого поиска
								уникальных значений.
							</li>
						</ul>
						<p>
							Пример:
							<Examples>
								const mySet = new Set();
								<br />
								mySet.add(1);
								<br />
								mySet.add(2);
								<br />
								mySet.add(1); // Не добавит дубликат
								<br />
								<br />
								console.log(mySet); // Вывод: Set &#123; 1, 2 &#125;
							</Examples>
						</p>
					</li>
					<li>
						<b>Map:</b>
						<ul>
							<li>
								<b>Map</b> представляет собой коллекцию пар ключ-значение, где
								ключи могут быть любого типа, включая объекты.
							</li>
							<li>Каждый ключ может соответствовать только одному значению.</li>
							<li>
								В отличие от объектов, <b>Map</b> сохраняет порядок добавления
								элементов и обеспечивает более надежное хранение ключей и
								значений.
							</li>
						</ul>
						<p>
							Пример:
							<Examples>
								const myMap = new Map();
								<br />
								myMap.set('name', 'John');
								<br />
								myMap.set('age', 30);
								<br />
								<br />
								console.log(myMap.get('name')); // Вывод: 'John'
							</Examples>
						</p>
					</li>
					<li>
						<b>WeakSet:</b>
						<ul>
							<li>
								<b>WeakSet</b> представляет собой коллекцию объектов, и эти
								объекты могут быть собраны сборщиком мусора (GC), если они
								больше не имеют других ссылок на них.
							</li>
							<li>
								Элементы <b>WeakSet</b> должны быть объектами, и они не
								перечисляются (нет методов для итерации).
							</li>
							<li>
								Полезен для отслеживания объектов с возможностью автоматической
								очистки при потере ссылок.
							</li>
						</ul>
					</li>
					<li>
						<b>WeakMap:</b>
						<ul>
							<li>
								<b>WeakMap</b> - это коллекция пар ключ-значение, где ключи
								должны быть объектами, и они могут быть собраны GC, если больше
								нет ссылок на ключ.
							</li>
							<li>
								В отличие от <b>Map</b>, <b>WeakMap</b> не предоставляет общих
								методов для итерации и перебора ключей.
							</li>
							<li>
								Полезен для связывания данных с объектами, где данные
								автоматически удаляются при удалении объекта.
							</li>
						</ul>
					</li>
				</ol>
			</p>
			<p>
				Обратите внимание, что <b>WeakSet</b> и <b>WeakMap</b> имеют
				ограниченные возможности по сравнению с <b>Set</b> и <b>Map</b>, но они
				предоставляют механизмы для работы с данными, которые могут быть
				подвержены сборке мусора.
			</p>
		</div>
	)
}

export default Question
