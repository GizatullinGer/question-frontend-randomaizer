import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Каррирование (Currying) - это техника в функциональном программировании,
				которая заключается в преобразовании функции с несколькими аргументами в
				последовательность функций, каждая из которых принимает только один
				аргумент. Этот процесс позволяет создавать новые функции на основе уже
				существующих путем разделения аргументов на последовательность вызовов.
			</p>
			<p>Вот пример:</p>
			<p>Представим у вас есть функция, которая складывает три числа:</p>
			<Examples>
				function sum(a, b, c) &#123;
				<br />
				&emsp;&emsp;return a + b + c;
				<br />
				&#125;
			</Examples>
			<p>
				После каррирования эта функция может быть преобразована в
				последовательность функций:
			</p>
			<Examples>
				function sum(a) &#123;
				<br />
				&emsp;&emsp;return function(b) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;return function(c) &#123;
				<br />
				&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return a + b + c;
				<br />
				&emsp;&emsp;&emsp;&emsp;&#125;;
				<br />
				&emsp;&emsp;&#125;;
				<br />
				&#125;
			</Examples>
			<p>
				Теперь вы можете использовать каррированную функцию для пошагового
				вызова:
			</p>
			<Examples>
				const step1 = sum(2); // Возвращает функцию, ожидающую 2 аргумента
				<br />
				const step2 = step1(3); // Возвращает функцию, ожидающую 1 аргумент
				<br />
				const result = step2(4); // Вычисляет результат: 2 + 3 + 4 = 9
			</Examples>
			<p>
				Каррирование полезно, так как это позволяет создавать более гибкие
				функции, упрощает их переиспользование, а также способствует созданию
				частично примененных функций, что может быть удобно в некоторых
				сценариях, особенно в функциональном программировании.
			</p>
		</div>
	)
}

export default Question
