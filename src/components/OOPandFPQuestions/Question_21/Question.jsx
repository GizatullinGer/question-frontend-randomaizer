import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Композиция и наследование - это два различных подхода к построению
				отношений между объектами в объектно-ориентированном программировании.
				Вот их основные различия:
			</p>
			<h3>Наследование:</h3>
			<p>
				<ol>
					<li>
						<b>Что это такое: </b> Наследование позволяет классу наследовать
						свойства и методы от другого класса. Новый класс (подкласс или
						наследник) расширяет функциональность существующего класса
						(родительского класса или суперкласса).
					</li>
					<li>
						<b>Отношение: </b> Наследование создает отношение "является" (is-a),
						где подкласс является типом суперкласса.
					</li>
					<li>
						<b>Пример: </b> Например, класс Car может наследовать свойства и
						методы класса Vehicle.
					</li>
				</ol>
			</p>
			<h3>Композиция:</h3>
			<p>
				<ol>
					<li>
						<b>Что это такое: </b> Композиция представляет собой отношение, где
						один объект содержит другой объект в качестве части своей структуры.
						Вместо того чтобы наследовать функциональность, объект использует
						другие объекты для достижения своих целей.
					</li>
					<li>
						<b>Отношение: </b> Композиция создает отношение "имеет" (has-a), где
						один объект имеет другой объект в качестве части.
					</li>
					<li>
						<b>Пример: </b> Например, класс Car может содержать объект Engine,
						Wheel и Chassis в качестве своих частей.
					</li>
				</ol>
			</p>
			<h3>Основные различия:</h3>
			<p>
				<ol>
					<li>
						<b>Гибкость: </b> Композиция обеспечивает большую гибкость,
						поскольку объект может содержать или использовать множество других
						объектов, в то время как наследование связывает классы более тесно и
						ограничивает их поведение.
					</li>
					<li>
						<b>Изменения: </b> Композиция обычно более устойчива к изменениям,
						поскольку объекты могут быть заменены или изменены без воздействия
						на другие части системы, в то время как изменение суперкласса при
						наследовании может влиять на все его подклассы.
					</li>
					<li>
						<b>Отношения: </b>Наследование создает более тесное отношение между
						классами, в то время как композиция позволяет объектам быть более
						независимыми.
					</li>
				</ol>
			</p>
			<p>
				Оба подхода имеют свои преимущества и недостатки, и выбор между ними
				зависит от специфики задачи, требований к проекту и структуры данных.
				Нередко комбинация обоих подходов дает наилучшие результаты для
				проектирования более гибких и расширяемых систем.
			</p>
		</div>
	)
}

export default Question
