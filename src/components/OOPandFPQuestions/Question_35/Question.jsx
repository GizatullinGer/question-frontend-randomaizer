import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Inversion of Control (IoC) - это принцип разработки программного
				обеспечения, где контроль над потоком выполнения программы переносится
				из самого приложения во внешний фреймворк или контейнер. Этот принцип
				важен для создания более гибких, расширяемых и обслуживаемых систем.
			</p>
			<h3>Основные аспекты Inversion of Control:</h3>
			<p>
				<ol>
					<li>
						<b>Разделение контроля: </b>IoC инвертирует обычный порядок
						управления программой: вместо того, чтобы само приложение
						контролировало последовательность вызовов и управление
						зависимостями, эти задачи переносятся на внешний контейнер или
						фреймворк.
					</li>
					<li>
						<b>Использование внешних фреймворков и контейнеров: </b>IoC
						реализуется часто с использованием фреймворков или контейнеров вроде
						Spring Framework для Java, AngularJS для JavaScript или ASP.NET Core
						для C#. Эти инструменты управляют жизненным циклом объектов и их
						зависимостями.
					</li>
					<li>
						<b>Обратные вызовы: </b>Программа не управляет вызовами своих
						зависимостей напрямую, а использует обратные вызовы или
						конфигурацию, чтобы внешний контейнер определял, какие зависимости
						нужно использовать.
					</li>
					<li>
						<b>Использование интерфейсов и инъекции зависимостей: </b>
						Использование интерфейсов и паттернов инъекции зависимостей
						позволяет более гибко управлять объектами и их взаимодействием.
					</li>
				</ol>
			</p>
			<h3>Преимущества Inversion of Control:</h3>
			<p>
				<ul>
					<li>
						<b>Гибкость и расширяемость: </b>Уменьшает связанность между
						компонентами, делая систему более гибкой и расширяемой.
					</li>
					<li>
						<b>Упрощение тестирования: </b>Позволяет легко использовать
						поддельные объекты или моки для тестирования, так как весь контроль
						зависимостей внешний.
					</li>
				</ul>
			</p>
			<h3>Реализация IoC может быть выполнена через:</h3>
			<p>
				<ul>
					<li>
						<b>Внедрение зависимостей (Dependency Injection): </b>Главный
						механизм реализации IoC, который позволяет передавать зависимости в
						объекты из внешнего источника.
					</li>
					<li>
						<b>События и обратные вызовы: </b>Позволяют объектам реагировать на
						события и вызывать методы обратного вызова, не управляя напрямую
						своими зависимостями.
					</li>
				</ul>
			</p>
			<p>
				IoC улучшает модульность, тестируемость и обслуживаемость приложений,
				уменьшая их связанность и повышая уровень абстракции.
			</p>
		</div>
	)
}

export default Question
