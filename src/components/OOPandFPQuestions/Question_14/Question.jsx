import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Монолитная и микросервисная архитектуры - это два различных подхода к
				построению и организации программных приложений. Вот основные различия
				между ними:
			</p>
			<h3>Монолитная архитектура:</h3>
			<p>
				<ol>
					<li>
						<b>Структура: </b>В монолитной архитектуре весь код приложения
						находится в одном большом блоке, обычно в одном репозитории.
						Приложение состоит из модулей или компонентов, но все они объединены
						вместе и работают как единое целое.
					</li>
					<li>
						<b>Масштабируемость: </b>Масштабирование монолитного приложения
						обычно происходит вертикально (путем увеличения ресурсов сервера),
						что может иметь ограничения по производительности и
						отказоустойчивости.
					</li>
					<li>
						<b>Простота развертывания: </b>Приложение разворачивается как единое
						целое, что может упростить начальное развертывание и управление им.
					</li>
					<li>
						<b>Связность: </b>Изменения в одной части монолитного приложения
						могут иметь влияние на другие части, что может привести к сложностям
						в поддержке и развитии приложения.
					</li>
				</ol>
			</p>
			<h3>Микросервисная архитектура:</h3>
			<p>
				<ol>
					<li>
						<b>Структура: </b>В микросервисной архитектуре приложение разделено
						на отдельные сервисы, каждый из которых представляет определенную
						функциональность. Каждый сервис работает в отдельном контейнере и
						может быть развернут и масштабирован независимо.
					</li>
					<li>
						<b>Масштабируемость: </b>Микросервисы позволяют масштабировать
						только те части приложения, которые нуждаются в большем объеме
						ресурсов, обеспечивая гибкость и оптимизацию использования ресурсов.
					</li>
					<li>
						<b>Гибкость и независимость: </b>Каждый микросервис может быть
						разработан, развернут и масштабирован отдельно, обеспечивая большую
						гибкость и независимость сервисов друг от друга.
					</li>
					<li>
						<b>Сложность управления: </b>Управление множеством сервисов требует
						более сложной инфраструктуры, такой как управление межсервисными
						вызовами, мониторинг и обеспечение целостности данных.
					</li>
				</ol>
			</p>
			<p>
				Выбор между монолитной и микросервисной архитектурами зависит от
				конкретных потребностей проекта, его масштаба, развития и специфики.
				Некоторые проекты начинают с монолитной архитектуры из-за простоты
				разработки, а затем переходят к микросервисной для улучшения
				масштабируемости и гибкости.
			</p>
		</div>
	)
}

export default Question
