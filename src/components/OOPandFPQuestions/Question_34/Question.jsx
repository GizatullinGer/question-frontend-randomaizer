import React from 'react'

const Question = () => {
	return (
		<div>
			<p>Вот некоторые плюсы и минусы реактивного программирования:</p>
			<h3>Плюсы:</h3>
			<p>
				<ol>
					<li>
						<b>Реактивность: </b>Реактивное программирование позволяет
						обрабатывать асинхронные события и обновления данных эффективно и
						реагировать на изменения в реальном времени.
					</li>
					<li>
						<b>Объединение потоков данных: </b>Возможность объединять,
						фильтровать, трансформировать и соединять потоки данных, облегчая их
						управление.
					</li>
					<li>
						<b>Чистота и предсказуемость: </b>Использование декларативного
						подхода способствует предсказуемости и упрощает понимание кода.
					</li>
					<li>
						<b>Упрощение работы с асинхронностью: </b>Реактивное
						программирование облегчает работу с асинхронными операциями и
						уменьшает возможные проблемы, такие как коллбэки и утечки памяти.
					</li>
					<li>
						<b>Упрощение комплексности интерфейсов: </b>Позволяет легко
						обновлять пользовательские интерфейсы и управлять состоянием
						приложения.
					</li>
				</ol>
			</p>
			<h3>Минусы:</h3>
			<p>
				<ol>
					<li>
						<b>Крутой кривой обучения: </b>Реактивное программирование может
						иметь крутой кривой обучения из-за своих особых концепций и
						асинхронного характера.
					</li>
					<li>
						<b>Потенциальная сложность отладки: </b>Код, основанный на
						реактивном подходе, иногда может быть сложным для отладки из-за
						своей сложной структуры.
					</li>
					<li>
						<b>Потребление ресурсов: </b>Некоторые реактивные фреймворки могут
						потреблять больше ресурсов (например, памяти и процессорного
						времени) из-за постоянного отслеживания изменений.
					</li>
					<li>
						<b>Потенциальные проблемы со скоростью выполнения: </b>Некорректное
						использование реактивного программирования может привести к
						ситуациям, когда приложение работает медленно из-за постоянного
						мониторинга и обновления данных.
					</li>
					<li>
						<b>Сложности интеграции: </b>Интеграция реактивного подхода с уже
						существующими кодовыми базами или библиотеками может потребовать
						дополнительных усилий и привести к сложностям.
					</li>
				</ol>
			</p>
			<p>
				Реактивное программирование имеет множество преимуществ, особенно в
				контексте работы с асинхронными данными и интерфейсами. Однако, как и с
				любым подходом, есть некоторые недостатки, которые следует учитывать при
				его использовании.
			</p>
		</div>
	)
}

export default Question
