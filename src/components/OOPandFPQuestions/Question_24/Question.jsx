import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Паттерны проектирования могут быть разделены на различные категории в
				зависимости от их цели, области применения и способа решения проблем.
				Ниже приведены основные категории паттернов проектирования:
			</p>
			<h3>1. Порождающие (Creational) паттерны:</h3>
			<p>
				<ul>
					<li>
						<b>Фабрика (Factory): </b>Создает объекты без указания конкретных
						классов создаваемых объектов.
					</li>
					<li>
						<b>Абстрактная фабрика (Abstract Factory): </b>Позволяет создавать
						семейства связанных объектов без указания их конкретных классов.
					</li>
					<li>
						<b>Строитель (Builder): </b>Используется для создания объектов с
						комплексной конфигурацией.
					</li>
					<li>
						<b>Одиночка (Singleton): </b>Гарантирует, что у класса есть только
						один экземпляр и предоставляет глобальную точку доступа к этому
						экземпляру.
					</li>
				</ul>
			</p>
			<h3>2. Структурные (Structural) паттерны:</h3>
			<p>
				<ul>
					<li>
						<b>Адаптер (Adapter): </b>Позволяет объектам с несовместимыми
						интерфейсами работать вместе.
					</li>
					<li>
						<b>Декоратор (Decorator): </b>Позволяет динамически добавлять новую
						функциональность объектам.
					</li>
					<li>
						<b>Фасад (Facade): </b>Предоставляет простой интерфейс для сложной
						системы, делая ее более понятной.
					</li>
				</ul>
			</p>
			<h3>3. Поведенческие (Behavioral) паттерны:</h3>
			<p>
				<ul>
					<li>
						<b>Наблюдатель (Observer): </b>Определяет зависимость типа
						"один-ко-многим" между объектами таким образом, что если один объект
						меняется, все зависящие от него объекты уведомляются об изменениях.
					</li>
					<li>
						<b>Стратегия (Strategy): </b>Позволяет выбирать алгоритм из набора
						алгоритмов на лету.
					</li>
					<li>
						<b>Цепочка обязанностей (Chain of Responsibility): </b>Позволяет
						передавать запросы последовательно по цепочке обработчиков.
					</li>
				</ul>
			</p>
			<h3>4. Архитектурные (Architectural) паттерны:</h3>
			<p>
				<ul>
					<li>
						<b>MVC (Model-View-Controller): </b>Разделяет приложение на три
						основных компонента: модель, представление и контроллер.
					</li>
					<li>
						<b>MVVM (Model-View-ViewModel): </b>Организует код приложения вокруг
						концепций модели, представления и модели представления.
					</li>
					<li>
						<b>N-tier (N-уровневая архитектура): </b>Разделяет приложение на
						несколько уровней (например, клиент-серверное приложение с уровнями
						клиента, сервера и базы данных).
					</li>
				</ul>
			</p>
			<p>
				Каждый тип паттернов имеет свои специфические задачи и способы решения
				проблем. Использование различных типов паттернов в соответствии с
				контекстом и требованиями проекта помогает создавать более эффективное,
				гибкое и легко поддерживаемое программное обеспечение.
			</p>
		</div>
	)
}

export default Question
