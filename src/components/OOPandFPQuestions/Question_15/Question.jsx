import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Как и любая архитектурная модель, как монолитная, так и микросервисная,
				имеют свои преимущества и недостатки. Давайте рассмотрим их:
			</p>
			<h3>Монолитная архитектура:</h3>
			<p>Плюсы:</p>
			<p>
				<ol>
					<li>
						<b>Простота разработки: </b>В монолитной архитектуре проще начать
						разработку приложения, так как всё находится в одной единице.
					</li>
					<li>
						<b>Производительность: </b>Монолиты могут быть быстрее, так как
						вызовы между компонентами обычно более эффективны, чем межсервисные
						запросы в микросервисной архитектуре.
					</li>
					<li>
						<b>Проще управление: </b>Управление одним приложением обычно проще,
						чем управление множеством микросервисов.
					</li>
				</ol>
			</p>
			<p>Минусы:</p>
			<p>
				<ol>
					<li>
						<b>Масштабируемость: </b>Монолиты могут столкнуться с ограничениями
						масштабируемости из-за того, что их нужно масштабировать
						вертикально.
					</li>
					<li>
						<b>Сложность поддержки: </b>При увеличении размера приложения и
						увеличении сложности может возникнуть сложность поддержки и
						разработки из-за большого количества кода в одном месте.
					</li>
				</ol>
			</p>
			<h3>Микросервисная архитектура:</h3>
			<p>Плюсы:</p>
			<p>
				<ol>
					<li>
						<b>Гибкость и масштабируемость: </b>Микросервисы позволяют
						масштабировать и развертывать только те части приложения, которые
						нуждаются в большем объеме ресурсов, обеспечивая гибкость и
						оптимизацию использования ресурсов.
					</li>
					<li>
						<b>Независимость и резервирование ошибок: </b> При возникновении
						ошибки в одном микросервисе, остальные могут продолжать работу, так
						как они независимы друг от друга.
					</li>
					<li>
						<b>Удобство развертывания и обновления: </b>Микросервисы могут быть
						легко развернуты и обновлены независимо друг от друга.
					</li>
				</ol>
			</p>
			<p>Минусы:</p>
			<p>
				<ol>
					<li>
						<b>Сложность управления: </b>Управление множеством микросервисов
						требует сложной инфраструктуры, такой как управление межсервисными
						вызовами, мониторинг и обеспечение целостности данных.
					</li>
					<li>
						<b>Большая сложность разработки: </b>Разработка микросервисной
						архитектуры может быть сложнее из-за необходимости обрабатывать
						проблемы, связанные с распределенной природой сервисов.
					</li>
				</ol>
			</p>
			<p>
				Обе архитектуры имеют свои преимущества и недостатки, и выбор между ними
				зависит от конкретных требований проекта, его масштаба, бизнес-целей и
				специфики задачи. Нередко в реальном мире разработка начинается с
				монолитной архитектуры, а затем переходит к микросервисной, когда это
				становится более оправданным из-за потребностей в масштабируемости и
				гибкости.
			</p>
		</div>
	)
}

export default Question
