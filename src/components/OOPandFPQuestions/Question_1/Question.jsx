import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Основные принципы объектно-ориентированного программирования (ООП) - это
				набор концепций и практик, которые ориентированы на организацию кода в
				виде объектов и классов. Эти принципы помогают создавать более
				модульные, масштабируемые и понятные программы. Вот основные принципы
				ООП:
			</p>
			<p>
				<ol>
					<li>
						<b>Инкапсуляция (Encapsulation): </b> Инкапсуляция означает сокрытие
						деталей реализации объекта и предоставление публичного интерфейса
						для взаимодействия с ним. Это позволяет скрыть изменяемые данные и
						предоставить контролируемый доступ к ним через методы (функции)
						объекта. Инкапсуляция помогает изолировать изменения внутри объекта
						от внешнего кода.
					</li>
					<li>
						<b>Наследование (Inheritance): </b> Наследование позволяет создавать
						новые классы на основе существующих (родительских) классов. Новый
						класс, называемый подклассом или наследником, может наследовать
						свойства и методы родительского класса, а также добавлять или
						переопределять их. Это способствует повторному использованию кода и
						созданию иерархии классов.
					</li>
					<li>
						<b>Полиморфизм (Polymorphism): </b> Полиморфизм позволяет объектам
						разных классов предоставлять общий интерфейс для выполнения
						определенных операций. Это означает, что разные объекты могут
						реализовывать один и тот же метод, но с разной функциональностью.
						Полиморфизм облегчает обработку объектов разных классов как
						однородных.
					</li>
					<li>
						<b>Абстракция (Abstraction): </b> Абстракция позволяет создавать
						абстрактные классы или интерфейсы, которые определяют общие
						характеристики и методы, но не предоставляют конкретной реализации.
						Абстракция помогает агрегировать схожие концепции и создавать более
						обобщенные структуры.
					</li>
					<li>
						<b>Специализация (Specialization): </b> Этот принцип связан с
						созданием новых классов на основе существующих, но с добавлением
						дополнительных свойств или методов. Он подчеркивает возможность
						расширения функциональности существующих классов.
					</li>
				</ol>
			</p>
		</div>
	)
}

export default Question
