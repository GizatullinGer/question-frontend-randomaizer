import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Как и в любой методологии, у функционального программирования (ФП) и
				объектно-ориентированного программирования (ООП) есть свои плюсы и
				минусы. Давайте рассмотрим их:
			</p>
			<h3>Плюсы ФП:</h3>
			<p>
				<ol>
					<li>
						<b>Избегание побочных эффектов: </b>
						Функции в ФП стремятся быть без побочных эффектов (pure functions),
						что способствует предсказуемости и упрощает тестирование.
					</li>
					<li>
						<b>Неизменяемость данных: </b>
						ФП способствует созданию неизменяемых структур данных, что облегчает
						отладку и уменьшает возможность ошибок, связанных с изменением
						данных.
					</li>
					<li>
						<b>Функции высшего порядка: </b>
						ФП позволяет использовать функции как аргументы и возвращать их из
						других функций, что способствует созданию более гибкого и модульного
						кода.
					</li>
					<li>
						<b>Рекурсия: </b>
						ФП поддерживает рекурсию, что упрощает решение некоторых задач,
						таких как обход структур данных и реализация алгоритмов.
					</li>
				</ol>
			</p>
			<h3>Минусы ФП:</h3>
			<p>
				<ol>
					<li>
						<b>Сложность в понимании: </b>Для некоторых разработчиков, особенно
						при переходе от императивного программирования, концепции ФП могут
						быть сложными для понимания.
					</li>
					<li>
						<b>Производительность: </b>Некоторые функциональные подходы могут
						замедлить выполнение программы из-за создания большего количества
						объектов и вызовов функций.
					</li>
				</ol>
			</p>
			<h3>Плюсы ООП:</h3>
			<p>
				<ol>
					<li>
						<b>Инкапсуляция: </b>ООП позволяет скрыть детали реализации от
						внешнего мира, что способствует безопасности и читаемости кода.
					</li>
					<li>
						<b>Полиморфизм и наследование: </b>ООП поддерживает концепции
						наследования, полиморфизма и абстракции, что способствует повторному
						использованию кода.
					</li>
					<li>
						<b>Удобство и понятность для некоторых задач: </b>Для некоторых
						видов программ и задач, ООП может предложить более интуитивный
						способ решения проблем.
					</li>
				</ol>
			</p>
			<h3>Минусы ООП:</h3>
			<p>
				<ol>
					<li>
						<b>Изменчивость данных: </b>Изменяемость объектов может привести к
						непредсказуемому поведению программы, особенно при параллельном
						выполнении кода.
					</li>
					<li>
						<b>Сложность поддержки кода: </b>Неправильное использование
						наследования или избыточное использование объектов может привести к
						усложнению кодовой базы.
					</li>
				</ol>
			</p>
			<p>
				Использование любой из этих парадигм зависит от требований конкретного
				проекта, предпочтений команды разработчиков и особенностей задачи. Часто
				комбинирование подходов из разных парадигм помогает создавать более
				гибкий и эффективный код.
			</p>
		</div>
	)
}

export default Question
