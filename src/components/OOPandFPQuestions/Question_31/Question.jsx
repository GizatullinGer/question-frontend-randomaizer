import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Функциональное программирование (FP) имеет ряд преимуществ, включая:
			</p>
			<h3>1. Чистые функции:</h3>
			<p>
				<ul>
					<li>
						<b>Предсказуемость: </b>Чистые функции без побочных эффектов проще
						понимать, тестировать и предсказывать поведение.
					</li>
					<li>
						<b>Устойчивость к ошибкам: </b>Благодаря отсутствию побочных
						эффектов чистые функции помогают предотвращать ошибки в программном
						коде.
					</li>
				</ul>
			</p>
			<h3>2. Изоляция состояния:</h3>
			<p>
				<ul>
					<li>
						<b>Неизменяемость: </b>Использование неизменяемых структур данных
						предотвращает изменение состояния, упрощая управление данными и их
						параллельную обработку.
					</li>
				</ul>
			</p>
			<h3>3. Функции высшего порядка:</h3>
			<p>
				<ul>
					<li>
						<b>Гибкость и переиспользование: </b>Функции могут принимать другие
						функции в качестве аргументов, что обеспечивает возможность создания
						более гибкого и переиспользуемого кода.
					</li>
				</ul>
			</p>
			<h3>4. Композиция функций:</h3>
			<p>
				<ul>
					<li>
						<b>Составление из простых частей: </b>Композиция функций позволяет
						создавать более сложные функции из простых, что упрощает поддержку и
						понимание кода.
					</li>
				</ul>
			</p>
			<h3>5. Параллельное выполнение:</h3>
			<p>
				<ul>
					<li>
						<b>Улучшенная масштабируемость: </b>Функциональные подходы могут
						упростить параллельное выполнение задач и улучшить масштабируемость
						программ.
					</li>
				</ul>
			</p>
			<h3>6. Декларативное программирование:</h3>
			<p>
				<ul>
					<li>
						<b>Сфокусированность на "что", а не "как": </b>Декларативный стиль
						программирования позволяет описывать желаемый результат, упрощая
						понимание кода.
					</li>
				</ul>
			</p>
			<h3>7. Прозрачность и предсказуемость:</h3>
			<p>
				<ul>
					<li>
						<b>Уменьшение побочных эффектов: </b>Функциональный подход
						способствует предсказуемости кода и уменьшает неожиданные побочные
						эффекты.
					</li>
				</ul>
			</p>
			<h3>8. Подходит для параллельного программирования:</h3>
			<p>
				<ul>
					<li>
						<b>Сокращение состояний и изменений: </b>Это облегчает параллельные
						вычисления, поскольку отсутствие общего изменяемого состояния
						упрощает управление потоками выполнения.
					</li>
				</ul>
			</p>
			<p>
				Функциональное программирование уделяет внимание чистоте функций,
				неизменяемости данных и фокусируется на работе с функциями, что делает
				код более читаемым, надежным и обеспечивает лучшую структуру для
				разработки и поддержки программного обеспечения.
			</p>
		</div>
	)
}

export default Question
