import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Наследование, как принцип объектно-ориентированного программирования
				(ООП), позволяет одному классу наследовать свойства и методы от другого
				класса. При использовании наследования можно также применять различные
				принципы ООП для создания более гибких, чистых и эффективных программ.
				Вот несколько принципов, которые часто используются вместе с
				наследованием:
			</p>
			<h3>Принцип подстановки Лисков (Liskov Substitution Principle):</h3>
			<p>
				Этот принцип предполагает, что объекты базового класса могут быть
				заменены объектами производного класса без нарушения работы программы.
				Это позволяет использовать полиморфизм, что упрощает обработку объектов
				разных классов через их общий интерфейс.
			</p>
			<h3>
				Принцип единственной ответственности (Single Responsibility Principle):
			</h3>
			<p>
				Этот принцип гласит, что каждый класс должен иметь только одну задачу
				или ответственность. Использование наследования в сочетании с этим
				принципом помогает создавать классы, которые ясно определяют свою роль в
				программе, делая их более поддерживаемыми и гибкими.
			</p>
			<h3>Принцип инверсии зависимостей (Dependency Inversion Principle):</h3>
			<p>
				Этот принцип предлагает программировать на уровне абстракций, а не на
				уровне конкретных реализаций. Использование наследования с учетом этого
				принципа позволяет создавать абстрактные классы или интерфейсы, которые
				декларируют общие методы, а конкретные реализации предоставляют
				подклассы.
			</p>
			<h3>Принцип открытости/закрытости (Open/Closed Principle):</h3>
			<p>
				Согласно этому принципу, классы должны быть открыты для расширения, но
				закрыты для изменения. Наследование позволяет добавлять новую
				функциональность через создание новых классов (расширение), не изменяя
				существующий код (закрытость).
			</p>
			<h3>Принцип композиции (Composition Principle):</h3>
			<p>
				Использование наследования в сочетании с композицией позволяет создавать
				более гибкие и многократно используемые системы. Это означает, что
				объекты могут содержать другие объекты в качестве своих частей, а не
				только наследовать их функциональность.
			</p>
			<p>
				Использование данных принципов вместе с наследованием поможет создавать
				более поддерживаемый, гибкий и расширяемый код в рамках
				объектно-ориентированного программирования.
			</p>
		</div>
	)
}

export default Question
