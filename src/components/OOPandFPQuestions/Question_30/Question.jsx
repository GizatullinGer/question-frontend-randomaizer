import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Основные принципы функционального программирования включают в себя
				следующие концепции:
			</p>
			<h3>1. Чистые функции (Pure Functions):</h3>
			<p>
				<ul>
					<li>
						<b>Без побочных эффектов: </b>Чистая функция возвращает результат,
						основанный только на своих аргументах, не имеет побочных эффектов на
						внешние переменные или состояние программы.
					</li>
					<li>
						<b>Детерминированность: </b>При одних и тех же входных данных
						функция всегда должна возвращать один и тот же результат.
					</li>
				</ul>
			</p>
			<h3>2. Неизменяемость (Immutability):</h3>
			<p>
				<ul>
					<li>
						<b>Немутабельные (неизменяемые) данные: </b>Данные не могут быть
						изменены после их создания. Вместо этого создаются новые данные при
						необходимости изменения.
					</li>
				</ul>
			</p>
			<h3>3. Функции высшего порядка (Higher-Order Functions):</h3>
			<p>
				<ul>
					<li>
						<b>Функции как данные: </b>Функции могут принимать другие функции в
						качестве аргументов или возвращать их в качестве результата.
					</li>
				</ul>
			</p>
			<h3>4. Рекурсия:</h3>
			<p>
				<ul>
					<li>
						<b>Использование рекурсии: </b>Процесс, когда функция вызывает саму
						себя для выполнения задачи.
					</li>
				</ul>
			</p>
			<h3>5. Композиция функций:</h3>
			<p>
				<ul>
					<li>
						<b>Комбинирование функций: </b>Создание сложной функциональности
						путем композиции (сочетания) простых функций в более сложные.
					</li>
				</ul>
			</p>
			<h3>6. Декларативное программирование:</h3>
			<p>
				<ul>
					<li>
						<b>Описание того, что должно быть сделано: </b>Фокус на описании
						желаемого результата, а не на шагах, необходимых для достижения
						этого результата.
					</li>
				</ul>
			</p>
			<h3>7. Прозрачность (Referential Transparency):</h3>
			<p>
				<ul>
					<li>
						<b>Подстановка значений: </b>Функции всегда могут быть заменены их
						значениями без изменения поведения программы.
					</li>
				</ul>
			</p>
			<h3>8. Функциональные структуры данных:</h3>
			<p>
				<ul>
					<li>
						<b>
							Структуры данных, которые поддерживают функциональный подход:{' '}
						</b>
						Например, неизменяемые списки, деревья и маппинги.
					</li>
				</ul>
			</p>
			<p>
				Функциональное программирование стремится к написанию кода, который
				легко читать, тестируем и поддерживать. Оно подчеркивает использование
				функций как основного строительного блока и избегает изменения состояния
				и побочных эффектов. Концепции функционального программирования помогают
				создавать более безопасный и надежный код, а также упрощают параллельное
				выполнение задач.
			</p>
		</div>
	)
}

export default Question
