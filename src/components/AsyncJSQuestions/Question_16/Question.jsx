import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				При использовании callback-функций в JavaScript могут возникать
				несколько типичных проблем, включая:
			</p>
			<p>
				<ol>
					<li>
						<b>Callback Hell (Ад колбэков): </b>Глубокая вложенность
						колбэк-функций может делать код сложным для чтения и понимания. Это
						особенно актуально, когда несколько асинхронных операций должны быть
						выполнены в определенной последовательности.
					</li>
					<li>
						<b>Сложность управления состоянием: </b>Управление состоянием и
						потоком выполнения может стать сложной задачей, особенно когда
						требуется управлять множеством колбэк-функций и следить за их
						завершением.
					</li>
					<li>
						<b>Отсутствие обработки ошибок: </b>Callback-функции могут не всегда
						обрабатывать ошибки эффективно, особенно если необходимо следить за
						ошибками внутри нескольких уровней вложенных колбэков. Это может
						привести к непредсказуемым результатам и отладке.
					</li>
					<li>
						<b>Трудность в отладке: </b>Отладка асинхронного кода с
						использованием колбэк-функций может быть сложной задачей из-за
						асинхронной природы операций и глубокой вложенности колбэков. Ошибки
						могут быть трудно выявить и воспроизвести.
					</li>
					<li>
						<b>Читаемость и поддерживаемость кода: </b>Код, написанный с
						использованием большого количества колбэк-функций, может быть менее
						читаемым и поддерживаемым, особенно для разработчиков, которые не
						знакомы с конкретной логикой приложения.
					</li>
					<li>
						<b>Ошибки при необработанных исключениях: </b> В случае
						возникновения исключения (exception) внутри колбэк-функции, которое
						не было обработано, оно может привести к аварийному завершению
						программы, что не всегда желательно.
					</li>
				</ol>
			</p>
			<p>
				Для улучшения управления асинхронным кодом и предотвращения
				вышеуказанных проблем были разработаны альтернативные подходы, такие как
				использование промисов (Promises) и синтаксиса async/await, которые
				делают код более читаемым, управляемым и предсказуемым. Они также
				предоставляют более мощные механизмы для обработки ошибок и работы с
				асинхронными операциями.
			</p>
		</div>
	)
}

export default Question
