import React from 'react'

const Question = () => {
	return (
		<div>
			<p>
				Синхронные и асинхронные функции представляют собой два основных способа
				выполнения кода в программировании, и их различие в том, как они
				управляют временем выполнения и блокируют ли они основной поток
				выполнения. Вот основные различия между ними:
			</p>
			<p>
				<ol>
					<li>
						<p>Синхронные функции (Synchronous Functions):</p>
						<ul>
							<li>
								<b>Блокировка выполнения: </b>Синхронные функции блокируют
								выполнение программы до тех пор, пока они не завершат свое
								выполнение. Это означает, что они выполняются последовательно, и
								следующая операция не начинается до завершения текущей.
							</li>
							<li>
								<b>Предсказуемость: </b>Из-за блокирующей природы синхронных
								функций время выполнения известно заранее, и код можно легче
								предсказать и отлаживать.
							</li>
							<li>
								<b>Пример: </b>Ввод/вывод с использованием readFileSync в
								Node.js или синхронные операции ввода/вывода в других языках
								программирования.
							</li>
						</ul>
					</li>
					<li>
						<p>Асинхронные функции (Asynchronous Functions):</p>
						<ul>
							<li>
								<b>Не блокируют выполнение: </b>Асинхронные функции выполняются
								параллельно с остальным кодом, и выполнение программы не
								блокируется. Они позволяют продолжать выполнение других задач,
								не ожидая завершения асинхронной операции.
							</li>
							<li>
								<b>Колбэки, обещания и async/await: </b>Для работы с
								асинхронными операциями часто используются колбэки (callbacks),
								обещания (promises) и ключевое слово{' '}
							</li>
							<li>
								<b>Пример: </b>Загрузка данных из сети, асинхронное
								чтение/запись файлов, асинхронные запросы к базе данных.
							</li>
						</ul>
					</li>
					<li>
						<p>Преимущества и недостатки:</p>
						<ul>
							<li>
								<p>
									<b>Синхронные функции:</b>
								</p>
								<ul>
									<li>
										Преимущества: Простота логики, предсказуемость, отсутствие
										гонки за данными.
									</li>
									<li>
										Недостатки: Могут привести к блокировке основного потока
										выполнения, что может сделать приложение медленным и
										неотзывчивым.
									</li>
								</ul>
							</li>
							<li>
								<p>
									<b>Асинхронные функции:</b>
								</p>
								<ul>
									<li>
										Преимущества: Улучшают отзывчивость приложения, позволяют
										параллельно обрабатывать несколько задач.
									</li>
									<li>
										Недостатки: Могут усложнить логику и код из-за необходимости
										управления асинхронными операциями и обработки ошибок.
									</li>
								</ul>
							</li>
						</ul>
					</li>
				</ol>
			</p>
		</div>
	)
}

export default Question
