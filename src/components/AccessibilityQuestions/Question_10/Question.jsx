import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Обычные функции (function expressions) и стрелочные функции (arrow
				functions) в JavaScript имеют несколько ключевых различий. Вот основные
				отличия между ними:
			</p>
			<p>
				<ol>
					<li>
						<b>Синтаксис:</b>
						<ul>
							<li>
								Обычная функция:
								<Examples>
									function add(a, b) &#123;
									<br />
									&emsp;&emsp;return a + b;
									<br />
									&#125;
								</Examples>
							</li>
							<li>
								Стрелочная функция:
								<Examples>const add = (a, b) =&gt; a + b;</Examples>
							</li>
						</ul>
					</li>
					<li>
						<b>this:</b>
						<ul>
							<li>
								В обычных функциях <b>this</b> зависит от контекста вызова и
								может изменяться в зависимости от того, как функция вызывается.
								В объекте <b>this</b> ссылается на объект, а в глобальной
								области <b>this</b> ссылается на глобальный объект (например,{' '}
								<b>window</b> в браузере).
							</li>
							<li>
								В стрелочных функциях <b>this</b> заимствовано из окружающей
								функции (родительской области видимости) и не имеет своего
								собственного контекста. Это означает, что <b>this</b> в
								стрелочной функции будет тем же, что и <b>this</b> в том
								контексте, в котором она была объявлена.
							</li>
						</ul>
					</li>
					<li>
						<b>Аргументы: </b>
						<ul>
							<li>
								В обычных функциях можно получить доступ к аргументам функции
								через объект <b>arguments</b>.
							</li>
							<li>
								В стрелочных функциях нет объекта <b>arguments</b>, и они не
								имеют собственных аргументов. Если вам нужно передать параметры,
								вы должны делать это явно через параметры функции.
							</li>
						</ul>
					</li>
					<li>
						<b>Ключевое слово new: </b>
						<ul>
							<li>
								Обычные функции могут быть использованы с оператором <b>new</b>{' '}
								для создания экземпляров объектов, и в этом случае <b>this</b>{' '}
								будет связано с новым объектом.
							</li>
							<li>
								Стрелочные функции не могут быть использованы с <b>new</b>, и
								попытка этого вызовет ошибку.
							</li>
						</ul>
					</li>
					<li>
						<b>super: </b>
						<ul>
							<li>
								Стрелочные функции не имеют связанного <b>super</b>, поэтому их
								нельзя использовать в качестве методов объектов, наследующих от
								других объектов.
							</li>
						</ul>
					</li>
					<li>
						<b>Краткость: </b>
						<ul>
							<li>
								Стрелочные функции предоставляют более краткий синтаксис для
								простых функций, которые выполняют одну операцию.
							</li>
						</ul>
					</li>
				</ol>
			</p>
			<p>
				Обычно, стрелочные функции используются для более кратких функций,
				которые не требуют сложной логики внутри тела функции, и когда важна
				семантика <b>this</b>. В то время как обычные функции подходят для
				функций с более сложной логикой или для методов объектов.
			</p>
		</div>
	)
}

export default Question
