/* eslint-disable react/jsx-no-comment-textnodes */
import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				ES6 модули (также известные как ECMAScript 2015 модули) - это
				стандартный способ организации и импорта кода в современном JavaScript.
				Они были введены в ECMAScript 6 (ES6) и предоставляют механизм для
				создания модульной структуры в JavaScript-приложениях. Модули позволяют
				разделять код на отдельные файлы и импортировать экспортируемые значения
				(переменные, функции, классы) из других модулей.
			</p>
			<p>Вот основные характеристики ES6 модулей:</p>
			<p>
				<ol>
					<li>
						<b>Спецификация ES6: </b>Модули представляют собой официальную часть
						стандарта ECMAScript 6 (ES6), поэтому они поддерживаются в
						современных браузерах и средах выполнения JavaScript.
					</li>
					<li>
						<p>
							<b>Экспорт и импорт: </b>В модулях вы можете использовать ключевые
							слова export и import для определения, какие значения (переменные,
							функции, классы) должны быть доступны в других модулях, и какие
							значения нужно импортировать из других модулей.
						</p>
						<p>Пример экспорта:</p>
						<Examples>
							// Модуль, который экспортирует переменную и функцию
							<br />
							export const myVariable = 42;
							<br />
							export function myFunction() &#123;
							<br />
							// ... <br />
							&#125;
						</Examples>
						<p>Пример импорта:</p>
						<Examples>
							// Модуль, который импортирует переменную и функцию
							<br />
							import &#123; myVariable, myFunction &#125; from './myModule';
						</Examples>
					</li>
					<li>
						<b>Локальная область видимости: </b>Каждый модуль имеет свою
						локальную область видимости, что означает, что переменные и функции,
						определенные внутри модуля, не будут доступны глобально.
					</li>
					<li>
						<b>Статическая анализация: </b>Импорт и экспорт в модулях
						выполняется на этапе статического анализа, что обеспечивает более
						безопасное и предсказуемое управление зависимостями.
					</li>
					<li>
						<b>Циклические зависимости: </b>ES6 модули позволяют обрабатывать
						циклические зависимости между модулями без проблем и зависимости
						разрешаются по мере необходимости.
					</li>
				</ol>
			</p>
			<p>
				Преимущества использования ES6 модулей включают в себя легкость
				организации кода, улучшенную поддержку статического анализа кода,
				поддержку циклических зависимостей и уменьшение глобального загрязнения
				пространства имен. Они предоставляют стандартизированный и эффективный
				способ структурирования и организации JavaScript-приложений.
			</p>
		</div>
	)
}

export default Question
