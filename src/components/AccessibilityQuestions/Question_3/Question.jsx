import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Переменные, объявленные с использованием ключевого слова <b>const</b>,
				обязательно должны быть инициализированы при их объявлении, и их
				значение не может быть изменено после этой инициализации. Попытка
				изменения значения переменной, объявленной с <b>const</b>, вызовет
				ошибку.
			</p>
			<p>
				Пример:
				<Examples>
					const pi = 3.14159; pi = 3.14; // Это вызовет ошибку, так как пытаемся{' '}
					<br />
					изменить значение const переменной.
				</Examples>
			</p>
			<p>
				Поэтому использование <b>const</b> подразумевает, что переменная будет
				иметь неизменное значение после инициализации. Если вам необходима
				переменная, значение которой может изменяться, вам следует использовать
				ключевое слово <b>let</b>.
			</p>
			<p>
				Пример:
				<Examples>
					let counter = 0; counter = 1; // Это допустимо для переменных, <br />
					объявленных с использованием let.
				</Examples>
			</p>
			<p>
				Итак, чтобы изменить значение переменной, используйте <b>let</b>, и
				используйте <b>const</b>, если значение переменной должно оставаться
				неизменным.
			</p>
			<p>
				<b>Примечание насчет массивов и объектов</b>
			</p>
			<p>
				Когда массивы и объекты объявлены с использованием <b>const</b>, сама
				переменная (ссылка) не может быть изменена. Однако вы можете изменять и
				модифицировать содержимое этого массива или объекта. Это означает, что
				массив или объект, объявленный с <b>const</b>, остается тем же самым
				массивом или объектом, и вы можете добавлять, удалять или изменять его
				элементы или свойства.
			</p>
			<p>
				Пример с массивом:
				<Examples>
					const numbers = [1, 2, 3]; <br />
					numbers.push(4); // Допустимо - изменяем содержимое массива. <br />
					numbers[0] = 0; // Допустимо - изменяем содержимое массива. <br />
				</Examples>
			</p>
			<p>
				Пример с объектом:
				<Examples>
					const person = &#123; name: 'John', age: 30 &#125;;
					<br />
					person.age = 31; // Допустимо - изменяем свойство объекта.
					<br />
					person.address = 'New York'; // Допустимо - добавляем новое свойство
					объекту.
					<br />
				</Examples>
			</p>
			<p>
				Важно помнить, что const применяется к переменной, которая хранит ссылку
				на массив или объект, а не к самому массиву или объекту. Поэтому вы не
				можете просто присвоить новый массив или объект переменной, объявленной
				с const. Например:
			</p>
			<p>
				<Examples>
					const numbers = [1, 2, 3];
					<br />
					numbers = [4, 5, 6]; // Это вызовет ошибку, так как пытаемся
					переназначить переменную.
				</Examples>
			</p>
			<p>
				Но вы можете изменить содержимое этого массива или объекта, не изменяя
				ссылку на переменную <b>numbers</b> или <b>person</b>, объявленную с{' '}
				<b>const</b>.
			</p>
		</div>
	)
}

export default Question
