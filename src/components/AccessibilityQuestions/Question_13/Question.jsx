import React from 'react'
import { Examples } from '../../Examples/Examples'

const Question = () => {
	return (
		<div>
			<p>
				Генераторы (Generators) - это специальный тип функций в JavaScript,
				который может приостанавливать своё выполнение и затем возобновлять его
				снова на более позднем этапе. Генераторы представляют собой мощный
				механизм для управления потоком выполнения и позволяют создавать
				итерируемые последовательности значений. Они были введены в стандарте
				ECMAScript 6 (ES6).
			</p>
			<p>Основные характеристики генераторов:</p>
			<p>
				<ol>
					<li>
						<b>Функция-генератор:</b> Генератор объявляется как обычная функция,
						но вместо ключевого слова <b>function</b> используется{' '}
						<b>function*</b> (с символом звездочки). Внутри функции-генератора
						используется ключевое слово <b>yield</b>, чтобы приостановить
						выполнение и возвратить значение.
					</li>
					<li>
						<b>Приостановка и возобновление: </b>Генератор может
						приостанавливать выполнение с помощью <b>yield</b> и возобновлять
						его снова при вызове метода <b>next()</b>. Каждый раз, когда
						вызывается <b>next()</b>, генератор выполняется до следующего
						оператора <b>yield</b>.
					</li>
					<li>
						<b>Итерируемые последовательности: </b>Генераторы часто используются
						для создания итерируемых последовательностей, таких как бесконечные
						последовательности чисел, аналогичные Python генераторам.
					</li>
				</ol>
			</p>
			<p>Пример генератора:</p>
			<p>
				<Examples>
					function* infiniteSequence() &#123;
					<br />
					&emsp;&emsp;let i = 0;
					<br />
					&emsp;&emsp;while (true) &#123;
					<br />
					&emsp;&emsp;&emsp;&emsp;yield i++;
					<br />
					&emsp;&emsp;&#125;
					<br />
					&#125;
					<br />
					<br />
					const iterator = infiniteSequence();
					<br />
					<br />
					console.log(iterator.next().value); // Вывод: 0<br />
					console.log(iterator.next().value); // Вывод: 1<br />
					console.log(iterator.next().value); // Вывод: 2<br />
				</Examples>
			</p>
			<p>Когда стоит использовать генераторы:</p>
			<p>
				<ol>
					<li>
						<b>Ленивый перебор: </b>Генераторы могут быть полезны для ленивого
						перебора больших данных или бесконечных последовательностей, таких
						как логи файлов, потоки данных, итерация больших списков и так
						далее.
					</li>
					<li>
						<b>Асинхронные операции: </b>Генераторы позволяют легко управлять
						асинхронными операциями, такими как запросы к серверу,
						приостанавливая выполнение и возобновляя его после завершения
						асинхронной задачи.
					</li>
					<li>
						<b>Итерация по деревьям и структурам данных: </b>Генераторы могут
						использоваться для удобной итерации по сложным структурам данных,
						таким как деревья.
					</li>
					<li>
						<b>Состояние и поток управления: </b>Генераторы позволяют сохранять
						состояние между вызовами next(), что делает их удобными для
						управления сложным потоком выполнения.
					</li>
				</ol>
			</p>
			<p>
				Генераторы предоставляют мощный механизм для более эффективного и
				гибкого управления потоком выполнения в JavaScript, и их использование
				особенно полезно в определенных сценариях.
			</p>
		</div>
	)
}

export default Question
