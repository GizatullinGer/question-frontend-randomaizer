import QUESTION_1 from '../components/ReactQuestions/Question_1/Question_1'
import QUESTION_8 from '../components/ReactQuestions/Question_8/Question_8'

export const allQuestions = {
	id: 1,
	name: 'Все вопросы',
	reactq: [
		{
			id: 1,
			question: 'Что такое React?',
			answer:
				'React — это библиотека JavaScript с открытым кодом для создания внешних пользовательских интерфейсов. В отличие от других библиотек JavaScript, предоставляющих полноценную платформу приложений, React ориентируется исключительно на создание представлений приложений через инкапсулированные единицы (называются компонентами), которые сохраняют состояние и генерируют элементы пользовательского интерфейса.',
			test: <QUESTION_1 />,
		},
		{
			id: 2,
			question: 'Перечислите особенности React?',
			answer:
				'Помогает сэкономить время, делает код более понятным и структурированным, даёт возможность переиспользовать большие блоки. Декларативность, универсальность, компонентный подход, виртуальный DOM, JSX',
		},
		{
			id: 3,
			question: 'Что такое Virtual DOM? Как он работает с React?',
			answer:
				'Это концепция программирования, в которой идеальное или «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM. Этот процесс называется согласованием. При изменении например стейтов, полностью перестраивается только Виртуальный DOM, в реальный DOM идут только маленькие (то что изменил стейт) изменения. Сам алгоритм, который за это отвечает, называется - механизм реконсиляции(React Reconciliation)',
		},
		{
			id: 4,
			question: 'Для чего нужен атрибут key при рендере списков?',
			answer:
				'Ключи помогают React идентифицировать, какие элементы были изменены, добавлены или удалены. Ключи должны быть заданы элементам внутри массива, чтобы предоставить элементам постоянный идентификатор',
		},
		{
			id: 5,
			question: 'Что такое PureComponent?',
			answer:
				'На данный момент React.memo заменяет PureComponent. Ранее PureComponent использовался в классовых компонентах',
		},
		{
			id: 6,
			question:
				'Что такое Компонент высшего порядка (Higher-Order Component/HOC)?',
			answer:
				'Компонент высшего порядка — это функция, которая принимает компонент и возвращает новый компонент.(устаревшая)',
		},
		{
			id: 7,
			question:
				'Разница между управляемыми (controlled) и не управляемыми (uncontrolled) компонентами?',
			answer: 'Про инпуты (устаревшая)',
		},
		{
			id: 8,
			question: 'Стадии и Методы жизненного цикла компонента в React?',
			answer: <QUESTION_8 />,
		},
		{
			id: 9,
			question: 'Что такое React Reconciliation?',
			answer:
				'Алгоритм за которым стоит то, что мы называем VirtualDOM. Как это работает: существует current tree, которая состит из совокупности метовод ренедера - nodes (node), и собирается целое дерево react элементов, которое описывает все состояние приложение и хранится в памяти. Далее это дерево попадает в среду рендеринга, среда переведет это дерево в набор операций, при этом данная среда приоретизирует дом операции по срочности. При первой загрузки сайта среда отрисует полностью дом дерево. Далее изменение какого-либо компонента, ведет к изменению в нашем сайте, и как результат строится новое дерево - Work-in-Progress. Далее эти деревья сравниваются и вычесляется разница между ними. И только разница эти деревьев отдается в рендеринг окружения. Следующий шаг, опять приоритезация, и только потом обновление DOM дерева нашего сайта. Work-in-Progress дерево становится current деревом',
		},
		{
			id: 10,
			question: 'Что такое React Fiber?',
			answer:
				'Цель Fiber в увеличении производительности при разработке таких задач как анимация, организация элементов на странице и движение элементов. Ее главная особенность это инкрементный рендеринг: способность разделять работу рендера на единицы и распределять их между множественными фреймами. Другие ключевые фичи включают возможность приостановки, отмены или переиспользования входящих обновлений DOM дерева, возможность приоритизации разных типов обновлений, а также — согласование примитивов. Fiber – переделанная реализация алгоритма reconciliation. Она имеет непрямое отношение к рендерингу, в то время как механизмы рендеринга (отрисовщики) могут быть изменены чтоб поддерживать все приемущества новой архитектуры.',
		},
	],
}
